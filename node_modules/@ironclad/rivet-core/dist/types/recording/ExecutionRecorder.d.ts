import { type GraphProcessor, type RecordedEvents, type Recording, type RecordingId } from '../index.js';
import Emittery from 'emittery';
export type ExecutionRecorderEvents = {
    finish: {
        recording: Recording;
    };
};
export type ExecutionRecorderOptions = {
    includePartialOutputs?: boolean;
    includeTrace?: boolean;
};
export declare class ExecutionRecorder {
    #private;
    recordingId: RecordingId | undefined;
    constructor(options?: ExecutionRecorderOptions);
    on: Emittery<ExecutionRecorderEvents>['on'];
    off: Emittery<ExecutionRecorderEvents>['off'];
    once: Emittery<ExecutionRecorderEvents>['once'];
    recordSocket(channel: WebSocket): Promise<void>;
    record(processor: GraphProcessor): void;
    getRecording(): Recording;
    get events(): RecordedEvents[];
    static deserializeFromString(serialized: string): ExecutionRecorder;
    serialize(): string;
}
