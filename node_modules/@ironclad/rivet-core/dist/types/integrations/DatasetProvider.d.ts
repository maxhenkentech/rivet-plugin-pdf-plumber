import { type Dataset, type DatasetId, type DatasetMetadata, type DatasetRow, type ProjectId } from '../index.js';
import type { CombinedDataset } from '../utils/index.js';
export interface DatasetProvider {
    getDatasetMetadata(id: DatasetId): Promise<DatasetMetadata | undefined>;
    getDatasetsForProject(projectId: ProjectId): Promise<DatasetMetadata[]>;
    getDatasetData(id: DatasetId): Promise<Dataset>;
    putDatasetData(id: DatasetId, data: Dataset): Promise<void>;
    putDatasetRow(id: DatasetId, row: DatasetRow): Promise<void>;
    putDatasetMetadata(metadata: DatasetMetadata): Promise<void>;
    clearDatasetData(id: DatasetId): Promise<void>;
    deleteDataset(id: DatasetId): Promise<void>;
    /** Gets the K nearest neighbor rows to the given vector. */
    knnDatasetRows(datasetId: DatasetId, k: number, vector: number[]): Promise<(DatasetRow & {
        distance?: number;
    })[]>;
    exportDatasetsForProject(projectId: ProjectId): Promise<CombinedDataset[]>;
}
export declare class InMemoryDatasetProvider implements DatasetProvider {
    #private;
    constructor(datasets: CombinedDataset[]);
    getDatasetMetadata(id: DatasetId): Promise<DatasetMetadata | undefined>;
    getDatasetsForProject(projectId: ProjectId): Promise<DatasetMetadata[]>;
    getDatasetData(id: DatasetId): Promise<Dataset>;
    putDatasetRow(id: DatasetId, row: DatasetRow): Promise<void>;
    putDatasetData(id: DatasetId, data: Dataset): Promise<void>;
    putDatasetMetadata(metadata: DatasetMetadata): Promise<void>;
    clearDatasetData(id: DatasetId): Promise<void>;
    deleteDataset(id: DatasetId): Promise<void>;
    knnDatasetRows(datasetId: DatasetId, k: number, vector: number[]): Promise<(DatasetRow & {
        distance?: number | undefined;
    })[]>;
    exportDatasetsForProject(_projectId: ProjectId): Promise<CombinedDataset[]>;
}
