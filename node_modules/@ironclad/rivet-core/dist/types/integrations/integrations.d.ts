import { type InternalProcessContext } from '../model/ProcessContext.js';
import { type EmbeddingGenerator } from './EmbeddingGenerator.js';
import { type LLMProvider } from './LLMProvider.js';
import { type VectorDatabase } from './VectorDatabase.js';
export type IntegrationFactories = {
    vectorDatabase: (context: InternalProcessContext) => VectorDatabase;
    llmProvider: (context: InternalProcessContext) => LLMProvider;
    embeddingGenerator: (context: InternalProcessContext) => EmbeddingGenerator;
};
export type IntegrationType = keyof IntegrationFactories;
export declare function registerIntegration<T extends IntegrationType>(type: T, integrationKey: string, factory: IntegrationFactories[T]): void;
export declare function getIntegration<T extends IntegrationType>(type: T, integrationKey: string, context: InternalProcessContext): ReturnType<IntegrationFactories[T]>;
