import type { Inputs, Outputs } from './GraphProcessor.js';
import type { ChartNode, NodeConnection, NodeId, NodeInputDefinition, NodeOutputDefinition } from './NodeBase.js';
import type { Project } from './Project.js';
import type { InternalProcessContext } from './ProcessContext.js';
import type { EditorDefinition } from './EditorDefinition.js';
import type { NodeBodySpec } from './NodeBodySpec.js';
import type { RivetUIContext } from './RivetUIContext.js';
export interface PluginNodeImpl<T extends ChartNode> {
    getInputDefinitions(data: T['data'], connections: NodeConnection[], nodes: Record<NodeId, ChartNode>, project: Project): NodeInputDefinition[];
    getOutputDefinitions(data: T['data'], connections: NodeConnection[], nodes: Record<NodeId, ChartNode>, project: Project): NodeOutputDefinition[];
    process(data: T['data'], inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;
    getEditors(data: T['data'], context: RivetUIContext): EditorDefinition<T>[] | Promise<EditorDefinition<T>[]>;
    getBody(data: T['data'], context: RivetUIContext): NodeBody | Promise<NodeBody>;
    create(): T;
    getUIData(context: RivetUIContext): NodeUIData | Promise<NodeUIData>;
}
export declare abstract class NodeImpl<T extends ChartNode, Type extends T['type'] = T['type']> {
    readonly chartNode: T;
    constructor(chartNode: T);
    get id(): string;
    get type(): Type;
    get title(): string;
    get visualData(): {
        x: number;
        y: number;
    };
    get data(): T['data'];
    abstract getInputDefinitions(connections: NodeConnection[], nodes: Record<NodeId, ChartNode>, project: Project): NodeInputDefinition[];
    abstract getOutputDefinitions(connections: NodeConnection[], nodes: Record<NodeId, ChartNode>, project: Project): NodeOutputDefinition[];
    abstract process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;
    getEditors(_context: RivetUIContext): EditorDefinition<T>[] | Promise<EditorDefinition<T>[]>;
    getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody>;
}
export type NodeBody = string | NodeBodySpec | NodeBodySpec[] | undefined;
export declare class PluginNodeImplClass<T extends ChartNode, Type extends T['type'] = T['type']> extends NodeImpl<T, Type> {
    readonly impl: PluginNodeImpl<T>;
    constructor(chartNode: T, impl: PluginNodeImpl<T>);
    getInputDefinitions(connections: NodeConnection[], nodes: Record<NodeId, ChartNode>, project: Project): NodeInputDefinition[];
    getOutputDefinitions(connections: NodeConnection[], nodes: Record<NodeId, ChartNode>, project: Project): NodeOutputDefinition[];
    process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;
    getEditors(context: RivetUIContext): EditorDefinition<T>[] | Promise<EditorDefinition<T>[]>;
    getBody(context: RivetUIContext): NodeBody | Promise<NodeBody>;
}
export type NodeUIData = {
    contextMenuTitle?: string;
    infoBoxTitle?: string;
    infoBoxBody?: string;
    infoBoxImageUri?: string;
    group?: string | string[];
};
export type NodeImplConstructor<T extends ChartNode> = {
    new (chartNode: T, pluginImpl: PluginNodeImpl<T> | undefined): NodeImpl<T>;
    create(pluginImpl?: PluginNodeImpl<T>): T;
    getUIData(context: RivetUIContext): NodeUIData | Promise<NodeUIData>;
};
