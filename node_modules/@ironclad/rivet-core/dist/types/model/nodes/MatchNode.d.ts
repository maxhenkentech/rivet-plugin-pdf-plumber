import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type EditorDefinition, type Inputs, type NodeBody, type Outputs } from '../../index.js';
export type MatchNode = ChartNode<'match', MatchNodeData>;
export type MatchNodeData = {
    cases: string[];
    /** If true, only the first matching branch will be ran. */
    exclusive?: boolean;
};
export declare class MatchNodeImpl extends NodeImpl<MatchNode> {
    static create(): MatchNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getBody(): NodeBody;
    getEditors(): EditorDefinition<MatchNode>[];
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const matchNode: import("../NodeDefinition.js").NodeDefinition<MatchNode>;
