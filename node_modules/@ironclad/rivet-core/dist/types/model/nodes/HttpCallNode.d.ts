import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition, type InternalProcessContext } from '../../index.js';
export type HttpCallNode = ChartNode<'httpCall', HttpCallNodeData>;
export type HttpCallNodeData = {
    method: 'GET' | 'POST' | 'PUT' | 'DELETE';
    useMethodInput?: boolean;
    url: string;
    useUrlInput?: boolean;
    headers: string;
    useHeadersInput?: boolean;
    body: string;
    useBodyInput?: boolean;
    errorOnNon200?: boolean;
};
export declare class HttpCallNodeImpl extends NodeImpl<HttpCallNode> {
    static create(): HttpCallNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<HttpCallNode>[];
    getBody(): string;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const httpCallNode: import("../NodeDefinition.js").NodeDefinition<HttpCallNode>;
