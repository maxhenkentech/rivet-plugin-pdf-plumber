import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
export type FilterNode = ChartNode<'filter', FilterNodeData>;
export type FilterNodeData = {};
export declare class FilterNodeImpl extends NodeImpl<FilterNode> {
    static create(): FilterNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const filterNode: import("../NodeDefinition.js").NodeDefinition<FilterNode>;
