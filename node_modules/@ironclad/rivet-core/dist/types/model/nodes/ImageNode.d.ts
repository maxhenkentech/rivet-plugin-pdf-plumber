import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataRef, type EditorDefinition, type Inputs, type InternalProcessContext, type Outputs } from '../../index.js';
export type ImageNode = ChartNode<'image', ImageNodeData>;
type ImageNodeData = {
    data?: DataRef;
    useDataInput: boolean;
    mediaType: 'image/png' | 'image/jpeg' | 'image/gif';
    useMediaTypeInput: boolean;
};
export declare class ImageNodeImpl extends NodeImpl<ImageNode> {
    static create(): ImageNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ImageNode>[];
    static getUIData(): NodeUIData;
    process(inputData: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const imageNode: import("../NodeDefinition.js").NodeDefinition<ImageNode>;
export {};
