import { type ChartNode, type NodeConnection, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { RivetUIContext } from '../RivetUIContext.js';
import type { InternalProcessContext } from '../ProcessContext.js';
export type AssemblePromptNode = ChartNode<'assemblePrompt', AssemblePromptNodeData>;
export type AssemblePromptNodeData = {
    computeTokenCount?: boolean;
};
export declare class AssemblePromptNodeImpl extends NodeImpl<AssemblePromptNode> {
    #private;
    static create(): AssemblePromptNode;
    getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(_context: RivetUIContext): EditorDefinition<AssemblePromptNode>[];
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const assemblePromptNode: import("../NodeDefinition.js").NodeDefinition<AssemblePromptNode>;
