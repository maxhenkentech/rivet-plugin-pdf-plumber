import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type ChartNode, type NodeConnection, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
export type PassthroughNode = ChartNode<'passthrough', PassthroughNodeData>;
export type PassthroughNodeData = {};
export declare class PassthroughNodeImpl extends NodeImpl<PassthroughNode> {
    #private;
    static create: () => PassthroughNode;
    getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[];
    getOutputDefinitions(connections: NodeConnection[]): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    process(inputData: Inputs): Promise<Outputs>;
}
export declare const passthroughNode: import("../NodeDefinition.js").NodeDefinition<PassthroughNode>;
