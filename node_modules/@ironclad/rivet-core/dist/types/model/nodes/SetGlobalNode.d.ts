import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataType } from '../DataValue.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import { type NodeBodySpec } from '../NodeBodySpec.js';
export type SetGlobalNode = ChartNode<'setGlobal', SetGlobalNodeData>;
export type SetGlobalNodeData = {
    id: string;
    useIdInput: boolean;
    dataType: DataType;
};
export declare class SetGlobalNodeImpl extends NodeImpl<SetGlobalNode> {
    static create(): SetGlobalNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<SetGlobalNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const setGlobalNode: import("../NodeDefinition.js").NodeDefinition<SetGlobalNode>;
