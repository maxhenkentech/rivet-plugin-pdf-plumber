import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../../index.js';
export type VectorStoreNode = ChartNode<'vectorStore', VectorStoreNodeData>;
export type VectorStoreNodeData = {
    integration: string;
    useIntegrationInput?: boolean;
    collectionId: string;
    useCollectionIdInput?: boolean;
};
export declare class VectorStoreNodeImpl extends NodeImpl<VectorStoreNode> {
    static create(): VectorStoreNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<VectorStoreNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const vectorStoreNode: import("../NodeDefinition.js").NodeDefinition<VectorStoreNode>;
