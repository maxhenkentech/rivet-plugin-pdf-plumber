import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../../model/NodeBase.js';
import { NodeImpl, type NodeUIData } from '../../model/NodeImpl.js';
import { type EditorDefinition, type Inputs, type InternalProcessContext, type Outputs } from '../../index.js';
import type { Tokenizer, TokenizerCallInfo } from '../../integrations/Tokenizer.js';
export type ChunkNodeData = {
    numTokensPerChunk: number;
    model: string;
    useModelInput: boolean;
    overlap: number;
};
export type ChunkNode = ChartNode<'chunk', ChunkNodeData>;
export declare class ChunkNodeImpl extends NodeImpl<ChunkNode> {
    static create(): ChunkNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ChunkNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const chunkNode: import("../NodeDefinition.js").NodeDefinition<ChunkNode>;
export declare function chunkStringByTokenCount(tokenizer: Tokenizer, tokenizerInfo: TokenizerCallInfo, input: string, targetTokenCount: number, overlapPercent: number): string[];
