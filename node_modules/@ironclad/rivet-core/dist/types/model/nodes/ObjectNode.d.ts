import { type ChartNode, type NodeConnection, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataValue } from '../DataValue.js';
import { type EditorDefinition } from '../EditorDefinition.js';
export type ObjectNode = ChartNode<'object', ObjectNodeData>;
export type ObjectNodeData = {
    jsonTemplate: string;
};
export declare class ObjectNodeImpl extends NodeImpl<ObjectNode> {
    static create(): ObjectNode;
    getInputDefinitions(connections: NodeConnection[]): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ObjectNode>[];
    static getUIData(): NodeUIData;
    interpolate(baseString: string, values: Record<string, any>): string;
    process(inputs: Record<string, DataValue>): Promise<Record<string, DataValue>>;
}
export declare const objectNode: import("../NodeDefinition.js").NodeDefinition<ObjectNode>;
