import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import { type NodeBodySpec } from '../NodeBodySpec.js';
export type WaitForEventNode = ChartNode<'waitForEvent', WaitForEventNodeData>;
export type WaitForEventNodeData = {
    eventName: string;
    useEventNameInput: boolean;
};
export declare class WaitForEventNodeImpl extends NodeImpl<WaitForEventNode> {
    static create(): WaitForEventNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<WaitForEventNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const waitForEventNode: import("../NodeDefinition.js").NodeDefinition<WaitForEventNode>;
