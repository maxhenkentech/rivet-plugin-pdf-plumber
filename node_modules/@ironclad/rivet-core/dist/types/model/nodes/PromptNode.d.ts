import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type EditorDefinition, type Inputs, type InternalProcessContext, type NodeBodySpec, type Outputs } from '../../index.js';
export type PromptNode = ChartNode<'prompt', PromptNodeData>;
export type PromptNodeData = {
    type: 'system' | 'user' | 'assistant' | 'function';
    useTypeInput: boolean;
    promptText: string;
    name?: string;
    useNameInput?: boolean;
    enableFunctionCall?: boolean;
    computeTokenCount?: boolean;
};
export declare class PromptNodeImpl extends NodeImpl<PromptNode> {
    static create(): PromptNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<PromptNode>[];
    getBody(): string | NodeBodySpec | NodeBodySpec[] | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext<PromptNode>): Promise<Outputs>;
}
export declare const promptNode: import("../NodeDefinition.js").NodeDefinition<PromptNode>;
