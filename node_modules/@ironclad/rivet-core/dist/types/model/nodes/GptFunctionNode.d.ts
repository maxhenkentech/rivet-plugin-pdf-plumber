import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import { type NodeBodySpec } from '../NodeBodySpec.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
export type GptFunctionNode = ChartNode<'gptFunction', GptFunctionNodeData>;
export type GptFunctionNodeData = {
    name: string;
    useNameInput?: boolean;
    description: string;
    useDescriptionInput?: boolean;
    schema: string;
    useSchemaInput?: boolean;
};
export declare class GptFunctionNodeImpl extends NodeImpl<GptFunctionNode> {
    static create(): GptFunctionNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<GptFunctionNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const gptFunctionNode: import("../NodeDefinition.js").NodeDefinition<GptFunctionNode>;
