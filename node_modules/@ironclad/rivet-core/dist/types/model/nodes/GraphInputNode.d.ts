import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataType, type DataValue } from '../DataValue.js';
import { type Inputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition, type NodeBodySpec } from '../../index.js';
export type GraphInputNode = ChartNode<'graphInput', GraphInputNodeData>;
export type GraphInputNodeData = {
    id: string;
    dataType: DataType;
    defaultValue?: unknown;
    useDefaultValueInput?: boolean;
};
export declare class GraphInputNodeImpl extends NodeImpl<GraphInputNode> {
    static create(): GraphInputNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<GraphInputNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Record<string, DataValue>>;
}
export declare const graphInputNode: import("../NodeDefinition.js").NodeDefinition<GraphInputNode>;
