import { type ChartNode, type NodeOutputDefinition, type NodeInputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataType } from '../DataValue.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type InternalProcessContext } from '../ProcessContext.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import { type NodeBodySpec } from '../NodeBodySpec.js';
export type GraphOutputNode = ChartNode<'graphOutput', GraphOutputNodeData>;
export type GraphOutputNodeData = {
    id: string;
    dataType: DataType;
};
export declare class GraphOutputNodeImpl extends NodeImpl<GraphOutputNode> {
    static create(): GraphOutputNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<GraphOutputNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const graphOutputNode: import("../NodeDefinition.js").NodeDefinition<GraphOutputNode>;
