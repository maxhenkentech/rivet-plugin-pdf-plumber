import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import { type NodeBodySpec } from '../../index.js';
export type SliceNode = ChartNode<'slice', SliceNodeData>;
export type SliceNodeData = {
    start?: number;
    useStartInput?: boolean;
    count?: number;
    useCountInput?: boolean;
};
export declare class SliceNodeImpl extends NodeImpl<SliceNode> {
    static create(): SliceNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<SliceNode>[];
    getBody(): string | NodeBodySpec | NodeBodySpec[] | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const sliceNode: import("../NodeDefinition.js").NodeDefinition<SliceNode>;
