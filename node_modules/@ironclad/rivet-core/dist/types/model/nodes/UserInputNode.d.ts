import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import type { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import type { ArrayDataValue, StringDataValue } from '../DataValue.js';
import { type Outputs, type Inputs, type EditorDefinition, type NodeBodySpec } from '../../index.js';
export type UserInputNode = ChartNode<'userInput', UserInputNodeData>;
export type UserInputNodeData = {
    prompt: string;
    useInput: boolean;
    renderingFormat?: 'preformatted' | 'markdown';
};
export declare class UserInputNodeImpl extends NodeImpl<UserInputNode> {
    static create(): UserInputNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<UserInputNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(): Promise<Outputs>;
    getOutputValuesFromUserInput(questions: Inputs, answers: ArrayDataValue<StringDataValue>): Outputs;
}
export declare const userInputNode: import("../NodeDefinition.js").NodeDefinition<UserInputNode>;
