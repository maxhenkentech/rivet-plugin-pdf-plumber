import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition } from '../../index.js';
export type RandomNumberNode = ChartNode<'randomNumber', RandomNumberNodeData>;
export type RandomNumberNodeData = {
    min?: number;
    max?: number;
    integers?: boolean;
    maxInclusive?: boolean;
    useMinInput?: boolean;
    useMaxInput?: boolean;
};
export declare class RandomNumberNodeImpl extends NodeImpl<RandomNumberNode> {
    static create(): RandomNumberNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<RandomNumberNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const randomNumberNode: import("../NodeDefinition.js").NodeDefinition<RandomNumberNode>;
