import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition } from '../../index.js';
export type EvaluateNode = ChartNode<'evaluate', EvaluateNodeData>;
export type EvaluateNodeData = {
    operation: '+' | '-' | '*' | '/' | '^' | '%' | 'abs' | 'negate';
    useOperationInput?: boolean;
};
export declare class EvaluateNodeImpl extends NodeImpl<EvaluateNode> {
    static create(): EvaluateNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<EvaluateNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const evaluateNode: import("../NodeDefinition.js").NodeDefinition<EvaluateNode>;
