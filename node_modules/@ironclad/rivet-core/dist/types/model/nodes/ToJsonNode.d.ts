import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import { type EditorDefinition } from '../../index.js';
export type ToJsonNode = ChartNode<'toJson', ToJsonNodeData>;
export type ToJsonNodeData = {
    indented?: boolean;
};
export declare class ToJsonNodeImpl extends NodeImpl<ToJsonNode> {
    static create(): ToJsonNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ToJsonNode>[];
    getBody(): string | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const toJsonNode: import("../NodeDefinition.js").NodeDefinition<ToJsonNode>;
