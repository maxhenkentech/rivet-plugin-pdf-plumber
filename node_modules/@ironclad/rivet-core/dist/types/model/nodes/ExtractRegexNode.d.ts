import { type ChartNode, type NodeInputDefinition, type PortId, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type DataValue } from '../DataValue.js';
import { type EditorDefinition } from '../EditorDefinition.js';
import { type NodeBodySpec } from '../NodeBodySpec.js';
export type ExtractRegexNode = ChartNode<'extractRegex', ExtractRegexNodeData>;
export type ExtractRegexNodeData = {
    regex: string;
    useRegexInput: boolean;
    errorOnFailed: boolean;
    multilineMode?: boolean;
};
export declare class ExtractRegexNodeImpl extends NodeImpl<ExtractRegexNode> {
    static create(): ExtractRegexNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(): EditorDefinition<ExtractRegexNode>[];
    getBody(): string | NodeBodySpec | undefined;
    static getUIData(): NodeUIData;
    process(inputs: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>>;
}
export declare const extractRegexNode: import("../NodeDefinition.js").NodeDefinition<ExtractRegexNode>;
