import type { ChartNode, NodeInputDefinition, NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import type { InternalProcessContext } from '../ProcessContext.js';
import type { DatasetId } from '../Dataset.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { Inputs, Outputs } from '../GraphProcessor.js';
export type AppendToDatasetNode = ChartNode<'appendToDataset', AppendToDatasetNodeData>;
type AppendToDatasetNodeData = {
    datasetId: DatasetId;
    useDatasetIdInput?: boolean;
};
export declare class AppendToDatasetNodeImpl extends NodeImpl<AppendToDatasetNode> {
    static create(): AppendToDatasetNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    getEditors(): EditorDefinition<AppendToDatasetNode>[] | Promise<EditorDefinition<AppendToDatasetNode>[]>;
    process(inputs: Inputs, context: InternalProcessContext): Promise<Outputs>;
}
export declare const appendToDatasetNode: import("../NodeDefinition.js").NodeDefinition<AppendToDatasetNode>;
export {};
