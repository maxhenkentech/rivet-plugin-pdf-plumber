import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition } from '../NodeBase.js';
import { NodeImpl, type NodeBody, type NodeUIData } from '../NodeImpl.js';
import { type Inputs, type Outputs } from '../GraphProcessor.js';
import type { EditorDefinition } from '../EditorDefinition.js';
import type { RivetUIContext } from '../RivetUIContext.js';
export type PopNode = ChartNode<'pop', PopNodeData>;
export type PopNodeData = {
    fromFront?: boolean;
};
export declare class PopNodeImpl extends NodeImpl<PopNode> {
    static create(): PopNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    getEditors(_context: RivetUIContext): EditorDefinition<PopNode>[] | Promise<EditorDefinition<PopNode>[]>;
    static getUIData(): NodeUIData;
    getBody(_context: RivetUIContext): NodeBody | Promise<NodeBody>;
    process(inputs: Inputs): Promise<Outputs>;
}
export declare const popNode: import("../NodeDefinition.js").NodeDefinition<PopNode>;
