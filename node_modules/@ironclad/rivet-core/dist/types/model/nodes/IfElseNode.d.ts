import { NodeImpl, type NodeUIData } from '../NodeImpl.js';
import { type ChartNode, type NodeInputDefinition, type NodeOutputDefinition, type PortId } from '../NodeBase.js';
import { type DataValue } from '../DataValue.js';
export type IfElseNode = ChartNode<'ifElse', IfElseNodeData>;
export type IfElseNodeData = {};
export declare class IfElseNodeImpl extends NodeImpl<IfElseNode> {
    static create: () => IfElseNode;
    getInputDefinitions(): NodeInputDefinition[];
    getOutputDefinitions(): NodeOutputDefinition[];
    static getUIData(): NodeUIData;
    process(inputData: Record<PortId, DataValue>): Promise<Record<PortId, DataValue>>;
}
export declare const ifElseNode: import("../NodeDefinition.js").NodeDefinition<IfElseNode>;
