import { type ChartNode, type NodeImplConstructor, type NodeImpl } from '../index.js';
import type { NodeDefinition, PluginNodeDefinition } from './NodeDefinition.js';
import { type RivetPlugin } from './RivetPlugin.js';
export declare class NodeRegistration<NodeTypes extends string = never, Nodes extends ChartNode = never> {
    #private;
    NodesType: Nodes;
    NodeTypesType: NodeTypes;
    register<T extends ChartNode>(definition: NodeDefinition<T>, plugin?: RivetPlugin): NodeRegistration<NodeTypes | T['type'], Nodes | T>;
    registerPluginNode<T extends ChartNode>(definition: PluginNodeDefinition<T>, plugin: RivetPlugin): NodeRegistration<NodeTypes | T['type'], Nodes | T>;
    registerPlugin(plugin: RivetPlugin): void;
    create<T extends NodeTypes>(type: T): Extract<Nodes, {
        type: T;
    }>;
    createDynamic(type: string): ChartNode;
    createImpl<T extends Nodes>(node: T): NodeImpl<T>;
    createDynamicImpl(node: ChartNode): NodeImpl<ChartNode>;
    getDisplayName<T extends NodeTypes>(type: T): string;
    getDynamicDisplayName(type: string): string;
    isRegistered(type: NodeTypes): boolean;
    getNodeTypes(): NodeTypes[];
    getNodeConstructors(): NodeImplConstructor<ChartNode>[];
    getPluginFor(type: string): RivetPlugin | undefined;
    getPlugins(): RivetPlugin[];
}
