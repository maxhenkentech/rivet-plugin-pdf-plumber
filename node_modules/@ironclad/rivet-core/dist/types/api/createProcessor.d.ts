import type { PascalCase } from 'type-fest';
import { type AttachedData, type DataValue, type DatasetProvider, type ExternalFunction, type NativeApi, type NodeRegistration, type ProcessContext, type ProcessEvents, type Project, type RivetEventStreamFilterSpec, type Settings } from '../index.js';
import { GraphProcessor } from '../model/GraphProcessor.js';
export type LooseDataValue = DataValue | string | number | boolean;
export type RunGraphOptions = {
    graph?: string;
    inputs?: Record<string, LooseDataValue>;
    context?: Record<string, LooseDataValue>;
    nativeApi?: NativeApi;
    datasetProvider?: DatasetProvider;
    externalFunctions?: {
        [key: string]: ExternalFunction;
    };
    onUserEvent?: {
        [key: string]: (data: DataValue | undefined) => void;
    };
    abortSignal?: AbortSignal;
    registry?: NodeRegistration;
    getChatNodeEndpoint?: ProcessContext['getChatNodeEndpoint'];
} & {
    [P in keyof ProcessEvents as `on${PascalCase<P>}`]?: (params: ProcessEvents[P]) => void;
} & Settings;
export declare function coreCreateProcessor(project: Project, options: RunGraphOptions): {
    processor: GraphProcessor;
    inputs: Record<string, DataValue>;
    contextValues: Record<string, DataValue>;
    getEvents: (spec: RivetEventStreamFilterSpec) => AsyncGenerator<import("./streaming.js").RivetEventStreamEventInfo, void, unknown>;
    getSSEStream: (spec: RivetEventStreamFilterSpec) => ReadableStream<Uint8Array>;
    streamNode: (nodeIdOrTitle: string) => ReadableStream<string>;
    run(): Promise<import("../index.js").GraphOutputs>;
};
export declare function coreRunGraph(project: Project, options: RunGraphOptions): Promise<Record<string, DataValue>>;
export declare function loadProjectFromString(content: string): Project;
export declare function loadProjectAndAttachedDataFromString(content: string): [Project, AttachedData];
