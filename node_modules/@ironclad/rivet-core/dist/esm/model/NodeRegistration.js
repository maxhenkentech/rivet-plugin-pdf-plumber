import {} from '../index.js';
import { mapValues, values } from '../utils/typeSafety.js';
import {} from './RivetPlugin.js';
import {} from './RivetUIContext.js';
import { PluginNodeImplClass } from './NodeImpl.js';
export class NodeRegistration {
    NodesType = undefined;
    NodeTypesType = undefined;
    #infos = {};
    #plugins = [];
    #implsMap = {};
    #nodeTypes = [];
    register(definition, plugin) {
        const newRegistration = this;
        const typeStr = definition.impl.create(undefined).type;
        if (newRegistration.#infos[typeStr]) {
            throw new Error(`Duplicate node type: ${typeStr}`);
        }
        newRegistration.#infos[typeStr] = {
            displayName: definition.displayName,
            impl: definition.impl,
            plugin,
        };
        newRegistration.#implsMap[typeStr] = {
            impl: definition.impl,
            pluginImpl: undefined,
        };
        newRegistration.#nodeTypes.push(typeStr);
        return newRegistration;
    }
    registerPluginNode(definition, plugin) {
        const newRegistration = this;
        const typeStr = definition.impl.create().type;
        if (newRegistration.#infos[typeStr]) {
            throw new Error(`Duplicate node type: ${typeStr}`);
        }
        const pluginClass = class extends PluginNodeImplClass {
            static create() {
                return definition.impl.create();
            }
            static getUIData(context) {
                return definition.impl.getUIData(context);
            }
        };
        newRegistration.#infos[typeStr] = {
            displayName: definition.displayName,
            impl: pluginClass,
            plugin,
            pluginImpl: definition.impl,
        };
        newRegistration.#implsMap[typeStr] = {
            impl: pluginClass,
            pluginImpl: definition.impl,
        };
        newRegistration.#nodeTypes.push(typeStr);
        return newRegistration;
    }
    get #dynamicImpls() {
        return this.#implsMap;
    }
    get #dynamicDisplayNames() {
        const displayNameMap = mapValues(this.#infos, (info) => info.displayName);
        return displayNameMap;
    }
    registerPlugin(plugin) {
        if (plugin.register) {
            plugin.register((definition) => this.registerPluginNode(definition, plugin));
        }
        this.#plugins.push(plugin);
    }
    create(type) {
        const info = this.#infos[type];
        if (!info) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return info.impl.create(info.pluginImpl);
    }
    createDynamic(type) {
        const implClass = this.#dynamicImpls[type];
        if (!implClass) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return implClass.impl.create(implClass.pluginImpl);
    }
    createImpl(node) {
        const type = node.type;
        const info = this.#infos[type];
        if (!info) {
            throw new Error(`Unknown node type: ${type}`);
        }
        const { impl: ImplClass, pluginImpl } = info;
        const impl = new ImplClass(node, pluginImpl);
        if (!impl) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return impl;
    }
    createDynamicImpl(node) {
        const { type } = node;
        const ImplClass = this.#dynamicImpls[type];
        if (!ImplClass) {
            throw new Error(`Unknown node type: ${type}`);
        }
        // eslint-disable-next-line new-cap
        const impl = new ImplClass.impl(node, ImplClass.pluginImpl);
        if (!impl) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return impl;
    }
    getDisplayName(type) {
        const info = this.#infos[type];
        if (!info) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return info.displayName;
    }
    getDynamicDisplayName(type) {
        const displayName = this.#dynamicDisplayNames[type];
        if (!displayName) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return displayName;
    }
    isRegistered(type) {
        return this.#infos[type] !== undefined;
    }
    getNodeTypes() {
        return this.#nodeTypes;
    }
    getNodeConstructors() {
        return values(this.#dynamicImpls).map((info) => info.impl);
    }
    getPluginFor(type) {
        const info = this.#infos[type];
        if (!info) {
            throw new Error(`Unknown node type: ${type}`);
        }
        return info.plugin;
    }
    getPlugins() {
        return this.#plugins;
    }
}
