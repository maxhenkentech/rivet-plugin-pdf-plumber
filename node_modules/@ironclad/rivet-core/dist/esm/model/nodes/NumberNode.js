import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { coerceTypeOptional } from '../../utils/coerceType.js';
export class NumberNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'number',
            title: 'Number',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 200,
            },
            data: {
                value: 0,
                round: false,
                roundTo: 0,
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        return this.data.useValueInput
            ? [
                {
                    dataType: 'any',
                    id: 'input',
                    title: 'Input',
                },
            ]
            : [];
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'number',
                id: 'value',
                title: 'Value',
            },
        ];
    }
    getEditors() {
        return [
            { type: 'number', label: 'Value', dataKey: 'value', useInputToggleDataKey: 'useValueInput' },
            { type: 'toggle', label: 'Round', dataKey: 'round' },
            { type: 'number', label: 'Round To', dataKey: 'roundTo' },
        ];
    }
    getBody() {
        return this.data.useValueInput ? `(Input to number)` : (this.data.value ?? 0).toLocaleString();
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Outputs a number constant, or converts an input value into a number.

        Can be configured to round the number to a certain number of decimal places.
      `,
            infoBoxTitle: 'Number Node',
            contextMenuTitle: 'Number',
            group: ['Numbers'],
        };
    }
    async process(inputs) {
        let value = this.data.useValueInput
            ? coerceTypeOptional(inputs['input'], 'number') ?? this.data.value ?? 0
            : this.data.value ?? 0;
        const { roundTo = 0, round = false } = this.data;
        if (round) {
            value = Math.round(value * Math.pow(10, roundTo)) / Math.pow(10, roundTo);
        }
        return {
            ['value']: {
                type: 'number',
                value,
            },
        };
    }
}
export const numberNode = nodeDefinition(NumberNodeImpl, 'Number');
