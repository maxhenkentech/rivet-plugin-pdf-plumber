import { NodeImpl } from '../NodeImpl.js';
import { coerceTypeOptional, dedent, newId } from '../../utils/index.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class CreateDatasetNodeImpl extends NodeImpl {
    static create() {
        return {
            id: newId(),
            type: 'createDataset',
            title: 'Create Dataset',
            visualData: { x: 0, y: 0, width: 250 },
            data: {},
        };
    }
    getInputDefinitions() {
        return [
            {
                id: 'datasetId',
                title: 'Dataset ID',
                dataType: 'string',
            },
            {
                id: 'datasetName',
                title: 'Dataset Name',
                dataType: 'string',
            },
        ];
    }
    getOutputDefinitions() {
        return [
            {
                id: 'datasetId_out',
                title: 'Dataset ID',
                dataType: 'string',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Creates a new dataset with the provided ID and name. If the dataset already exists, it does nothing.
      `,
            infoBoxTitle: 'Create Dataset Node',
            contextMenuTitle: 'Create Dataset',
            group: ['Input/Output'],
        };
    }
    async process(inputs, context) {
        const { datasetProvider } = context;
        if (datasetProvider == null) {
            throw new Error('datasetProvider is required');
        }
        const datasetId = coerceTypeOptional(inputs['datasetId'], 'string') || newId();
        const datasetName = coerceTypeOptional(inputs['datasetName'], 'string') || datasetId;
        const existingDataset = await datasetProvider.getDatasetMetadata(datasetId);
        if (!existingDataset) {
            await datasetProvider.putDatasetMetadata({
                id: datasetId,
                name: datasetName,
                description: '',
                projectId: context.project.metadata.id,
            });
        }
        return {
            ['datasetId_out']: {
                type: 'string',
                value: datasetId || datasetName,
            },
        };
    }
}
export const createDatasetNode = nodeDefinition(CreateDatasetNodeImpl, 'Create Dataset');
