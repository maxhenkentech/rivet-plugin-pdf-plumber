import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import {} from '../DataValue.js';
import { dedent } from 'ts-dedent';
import {} from '../EditorDefinition.js';
import {} from '../NodeBodySpec.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class CodeNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'code',
            title: 'Code',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
            },
            data: {
                code: dedent `
          // This is a code node, you can write and JS in here and it will be executed.
          // Inputs are accessible via an object \`inputs\` and data is typed (i.e. inputs.foo.type, inputs.foo.value)
          // Return an object with named outputs that match the output names specified in the node's config.
          // Output values must by typed as well (e.g. { bar: { type: 'string', value: 'bar' } }
          return { output: inputs.input };
        `,
                inputNames: 'input',
                outputNames: 'output',
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        const inputNames = this.data.inputNames
            ? Array.isArray(this.data.inputNames)
                ? this.data.inputNames
                : [this.data.inputNames]
            : [];
        return inputNames.map((inputName) => {
            return {
                type: 'string',
                id: inputName.trim(),
                title: inputName.trim(),
                dataType: 'string',
                required: false,
            };
        });
    }
    getOutputDefinitions() {
        const outputNames = this.data.outputNames
            ? Array.isArray(this.data.outputNames)
                ? this.data.outputNames
                : [this.data.outputNames]
            : [];
        return outputNames.map((outputName) => {
            return {
                id: outputName.trim(),
                title: outputName.trim(),
                dataType: 'string',
            };
        });
    }
    getEditors() {
        return [
            {
                type: 'custom',
                customEditorId: 'CodeNodeAIAssist',
                label: 'AI Assist',
            },
            {
                type: 'code',
                label: 'Code',
                dataKey: 'code',
                language: 'javascript',
            },
            {
                type: 'stringList',
                label: 'Inputs',
                dataKey: 'inputNames',
            },
            {
                type: 'stringList',
                label: 'Outputs',
                dataKey: 'outputNames',
            },
        ];
    }
    getBody() {
        const trimmed = this.data.code
            .split('\n')
            .slice(0, 15)
            .map((line) => (line.length > 50 ? line.slice(0, 50) + '...' : line))
            .join('\n')
            .trim();
        return {
            type: 'colorized',
            text: trimmed,
            language: 'javascript',
            fontSize: 12,
            fontFamily: 'monospace',
        };
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Executes a piece of JavaScript code. See the Rivet Documentation for more information on how to write code for the Code Node.
      `,
            infoBoxTitle: 'Code Node',
            contextMenuTitle: 'Code',
            group: ['Advanced'],
        };
    }
    async process(inputs) {
        // eslint-disable-next-line no-new-func
        const codeFunction = new Function('inputs', this.chartNode.data.code);
        const outputs = codeFunction(inputs);
        if (outputs == null || typeof outputs !== 'object' || ('then' in outputs && typeof outputs.then === 'function')) {
            throw new Error('Code node must return an object with output values.');
        }
        return outputs;
    }
}
export const codeNode = nodeDefinition(CodeNodeImpl, 'Code');
