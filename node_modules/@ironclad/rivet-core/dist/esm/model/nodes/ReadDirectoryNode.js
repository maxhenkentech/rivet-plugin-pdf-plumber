import {} from '../NodeBase.js';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import { nanoid } from 'nanoid/non-secure';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import {} from '../ProcessContext.js';
import { dedent } from 'ts-dedent';
import { expectType } from '../../utils/expectType.js';
export class ReadDirectoryNodeImpl extends NodeImpl {
    static create() {
        return {
            id: nanoid(),
            type: 'readDirectory',
            title: 'Read Directory',
            visualData: { x: 0, y: 0 },
            data: {
                path: 'examples',
                recursive: false,
                usePathInput: false,
                useRecursiveInput: false,
                includeDirectories: false,
                useIncludeDirectoriesInput: false,
                filterGlobs: [],
                useFilterGlobsInput: false,
                relative: false,
                useRelativeInput: false,
                ignores: [],
                useIgnoresInput: false,
            },
        };
    }
    getInputDefinitions() {
        const inputDefinitions = [];
        if (this.chartNode.data.usePathInput) {
            inputDefinitions.push({
                id: 'path',
                title: 'Path',
                dataType: 'string',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useRecursiveInput) {
            inputDefinitions.push({
                id: 'recursive',
                title: 'Recursive',
                dataType: 'boolean',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useIncludeDirectoriesInput) {
            inputDefinitions.push({
                id: 'includeDirectories',
                title: 'Include Directories',
                dataType: 'boolean',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useFilterGlobsInput) {
            inputDefinitions.push({
                id: 'filterGlobs',
                title: 'Filter Globs',
                dataType: 'string[]',
                required: true,
                coerced: false,
            });
        }
        if (this.chartNode.data.useRelativeInput) {
            inputDefinitions.push({
                id: 'relative',
                title: 'Relative',
                dataType: 'boolean',
                required: true,
                coerced: false,
            });
        }
        return inputDefinitions;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'rootPath',
                title: 'Root Path',
                dataType: 'string',
            },
            {
                id: 'paths',
                title: 'Paths',
                dataType: 'string[]',
            },
        ];
    }
    getBody() {
        return dedent `
      Path: ${this.data.usePathInput ? '(Input)' : this.data.path}
      Recursive: ${this.data.useRecursiveInput ? '(Input)' : this.data.recursive}
      Include Directories: ${this.data.useIncludeDirectoriesInput ? '(Input)' : this.data.includeDirectories}
      Relative: ${this.data.useRelativeInput ? '(Input)' : this.data.relative}
      Filters: ${this.data.useFilterGlobsInput
            ? '(Input)'
            : this.data.filterGlobs.length > 0
                ? this.data.filterGlobs.join(', ')
                : 'None'}
    `;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Reads the contents of the specified directory and outputs an array of filenames.
      `,
            infoBoxTitle: 'Read Directory Node',
            contextMenuTitle: 'Read Directory',
            group: ['Input/Output'],
        };
    }
    async process(inputData, context) {
        const { nativeApi } = context;
        if (nativeApi == null) {
            throw new Error('This node requires a native API to run.');
        }
        const path = this.chartNode.data.usePathInput
            ? expectType(inputData['path'], 'string')
            : this.chartNode.data.path;
        const recursive = this.chartNode.data.useRecursiveInput
            ? expectType(inputData['recursive'], 'boolean')
            : this.chartNode.data.recursive;
        const includeDirectories = this.chartNode.data.useIncludeDirectoriesInput
            ? expectType(inputData['includeDirectories'], 'boolean')
            : this.chartNode.data.includeDirectories;
        const filterGlobs = this.chartNode.data.useFilterGlobsInput
            ? expectType(inputData['filterGlobs'], 'string[]')
            : this.chartNode.data.filterGlobs;
        const relative = this.chartNode.data.useRelativeInput
            ? expectType(inputData['relative'], 'boolean')
            : this.chartNode.data.relative;
        const ignores = this.chartNode.data.useIgnoresInput
            ? expectType(inputData['ignores'], 'string[]')
            : this.chartNode.data.ignores;
        try {
            const files = await nativeApi.readdir(path, undefined, {
                recursive,
                includeDirectories,
                filterGlobs,
                relative,
                ignores,
            });
            const outputs = {
                ['paths']: { type: 'string[]', value: files },
                ['rootPath']: { type: 'string', value: path },
            };
            return outputs;
        }
        catch (err) {
            const outputs = {
                ['paths']: { type: 'string[]', value: ['(no such path)'] },
                ['rootPath']: { type: 'string', value: path },
            };
            return outputs;
        }
    }
}
export const readDirectoryNode = nodeDefinition(ReadDirectoryNodeImpl, 'Read Directory');
