import {} from '../NodeBase.js';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import { nanoid } from 'nanoid/non-secure';
import {} from '../GraphProcessor.js';
import {} from '../ProcessContext.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { coerceTypeOptional } from '../../utils/coerceType.js';
import { getIntegration } from '../../integrations/integrations.js';
export class VectorNearestNeighborsNodeImpl extends NodeImpl {
    static create() {
        return {
            id: nanoid(),
            type: 'vectorNearestNeighbors',
            title: 'Vector KNN',
            visualData: { x: 0, y: 0, width: 200 },
            data: {
                k: 10,
                integration: 'pinecone',
                collectionId: '',
            },
        };
    }
    getInputDefinitions() {
        const inputDefinitions = [];
        inputDefinitions.push({
            id: 'vector',
            title: 'Vector',
            dataType: 'vector',
            required: true,
        });
        if (this.data.useIntegrationInput) {
            inputDefinitions.push({
                id: 'integration',
                title: 'Integration',
                dataType: 'string',
                required: true,
            });
        }
        if (this.data.useCollectionIdInput) {
            inputDefinitions.push({
                id: 'collectionId',
                title: 'Collection ID',
                dataType: 'string',
                required: true,
            });
        }
        if (this.data.useKInput) {
            inputDefinitions.push({
                id: 'k',
                title: 'K',
                dataType: 'number',
                required: true,
            });
        }
        return inputDefinitions;
    }
    getOutputDefinitions() {
        const outputs = [
            {
                id: 'results',
                title: 'Results',
                dataType: 'any[]',
            },
        ];
        return outputs;
    }
    getEditors() {
        return [
            {
                type: 'dropdown',
                label: 'Integration',
                dataKey: 'integration',
                options: [
                    { label: 'Pinecone', value: 'pinecone' },
                    { label: 'Milvus', value: 'milvus' },
                ],
                useInputToggleDataKey: 'useIntegrationInput',
            },
            {
                type: 'number',
                label: 'K',
                dataKey: 'k',
                min: 1,
                max: 100,
                step: 1,
                defaultValue: 10,
                useInputToggleDataKey: 'useKInput',
            },
            {
                type: 'string',
                label: 'Collection ID',
                dataKey: 'collectionId',
                useInputToggleDataKey: 'useCollectionIdInput',
            },
        ];
    }
    getBody() {
        return dedent `
      Integration: ${this.data.useIntegrationInput ? '(using input)' : this.data.integration}
      K: ${this.data.useKInput ? '(using input)' : this.data.k}
      Collection Id: ${this.data.useCollectionIdInput ? '(using input)' : this.data.collectionId}
    `;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Performs a k-nearest neighbors search on the vectors stored in the configured vector DB integration. Takes in a vector and returns the k closest vectors and their corresponding data.
      `,
            infoBoxTitle: 'Vector KNN Node',
            contextMenuTitle: 'Vector KNN',
            group: ['Input/Output'],
        };
    }
    async process(inputs, context) {
        const integration = this.data.useIntegrationInput
            ? coerceTypeOptional(inputs['integration'], 'string') ?? this.data.integration
            : this.data.integration;
        const vectorDb = getIntegration('vectorDatabase', integration, context);
        const k = this.data.useKInput ? coerceTypeOptional(inputs['k'], 'number') ?? this.data.k : this.data.k;
        if (inputs['vector']?.type !== 'vector') {
            throw new Error(`Expected vector input, got ${inputs['vector']?.type}`);
        }
        const results = await vectorDb.nearestNeighbors({ type: 'string', value: this.data.collectionId }, inputs['vector'], k);
        return {
            ['results']: results,
        };
    }
}
export const vectorNearestNeighborsNode = nodeDefinition(VectorNearestNeighborsNodeImpl, 'Vector KNN');
