import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { coerceTypeOptional } from '../../utils/coerceType.js';
export class RandomNumberNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'randomNumber',
            title: 'RNG',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 150,
            },
            data: {
                min: 0,
                max: 1,
                integers: false,
                maxInclusive: false,
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        const inputs = [];
        if (this.data.useMinInput) {
            inputs.push({
                dataType: 'number',
                id: 'min',
                title: 'Min',
            });
        }
        if (this.data.useMaxInput) {
            inputs.push({
                dataType: 'number',
                id: 'max',
                title: 'Max',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'number',
                id: 'value',
                title: 'Value',
            },
        ];
    }
    getEditors() {
        return [
            { type: 'number', label: 'Min', dataKey: 'min', useInputToggleDataKey: 'useMinInput' },
            { type: 'number', label: 'Max', dataKey: 'max', useInputToggleDataKey: 'useMaxInput' },
            { type: 'toggle', label: 'Integers', dataKey: 'integers' },
            { type: 'toggle', label: 'Max Inclusive', dataKey: 'maxInclusive' },
        ];
    }
    getBody() {
        return dedent `
      Min: ${this.data.useMinInput ? '(Input)' : this.data.min ?? 0}
      Max: ${this.data.useMaxInput ? '(Input)' : this.data.max ?? 1}
      ${this.data.integers ? 'Integers' : 'Floats'}
      ${this.data.maxInclusive ? 'Max Inclusive' : 'Max Exclusive'}
    `;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Outputs a random number between the configured min and max values.

        Can be configured to output only integers, and whether the max value is inclusive or exclusive.
      `,
            infoBoxTitle: 'RNG Node',
            contextMenuTitle: 'RNG',
            group: ['Numbers'],
        };
    }
    async process(inputs) {
        const min = this.data.useMinInput
            ? coerceTypeOptional(inputs['min'], 'number') ?? this.data.min ?? 0
            : this.data.min ?? 0;
        let max = this.data.useMaxInput
            ? coerceTypeOptional(inputs['max'], 'number') ?? this.data.max ?? 1
            : this.data.max ?? 1;
        if (this.data.integers && this.data.maxInclusive) {
            max += 1;
        }
        let value = Math.random() * (max - min) + min;
        if (this.data.integers) {
            value = Math.floor(value);
        }
        return {
            ['value']: {
                type: 'number',
                value,
            },
        };
    }
}
export const randomNumberNode = nodeDefinition(RandomNumberNodeImpl, 'Random Number');
