import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import { isEqual } from 'lodash-es';
import { match } from 'ts-pattern';
import { dedent } from 'ts-dedent';
import { nodeDefinition } from '../NodeDefinition.js';
import { coerceType, coerceTypeOptional } from '../../utils/coerceType.js';
export class CompareNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'compare',
            title: 'Compare',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 160,
            },
            data: {
                comparisonFunction: '==',
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        const inputs = [
            {
                dataType: 'any',
                id: 'a',
                title: 'A',
            },
            {
                dataType: 'any',
                id: 'b',
                title: 'B',
            },
        ];
        if (this.data.useComparisonFunctionInput) {
            inputs.push({
                dataType: 'string',
                id: 'comparisonFunction',
                title: 'Comparison Function',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'boolean',
                id: 'output',
                title: 'Output',
            },
        ];
    }
    getEditors() {
        return [
            {
                type: 'dropdown',
                label: 'Comparison Function',
                dataKey: 'comparisonFunction',
                options: [
                    { label: '==', value: '==' },
                    { label: '!=', value: '!=' },
                    { label: '<', value: '<' },
                    { label: '<=', value: '<=' },
                    { label: '>', value: '>' },
                    { label: '>=', value: '>=' },
                    { label: 'and', value: 'and' },
                    { label: 'or', value: 'or' },
                    { label: 'xor', value: 'xor' },
                    { label: 'nand', value: 'nand' },
                    { label: 'nor', value: 'nor' },
                    { label: 'xnor', value: 'xnor' },
                ],
                useInputToggleDataKey: 'useComparisonFunctionInput',
            },
        ];
    }
    getBody() {
        return this.data.useComparisonFunctionInput ? 'A (Comparison Function) B' : `A ${this.data.comparisonFunction} B`;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Compares two values using the configured operator and outputs the result.

        If the data types of the values do not match, then the B value is converted to the type of the A value.
      `,
            infoBoxTitle: 'Compare Node',
            contextMenuTitle: 'Compare',
            group: ['Logic'],
        };
    }
    async process(inputs) {
        const comparisonFunction = (this.data.useComparisonFunctionInput
            ? coerceType(inputs['comparisonFunction'], 'string')
            : this.data.comparisonFunction);
        const inputA = inputs['a'];
        const inputB = inputs['b'];
        if (!inputA) {
            return {
                ['output']: {
                    type: 'boolean',
                    value: match(comparisonFunction)
                        .with('==', () => !inputB)
                        .with('!=', () => !!inputB)
                        .otherwise(() => false),
                },
            };
        }
        const value1 = inputA.value;
        const value2 = inputB?.type !== inputA.type ? coerceTypeOptional(inputB, inputA.type) : inputB.value;
        return {
            ['output']: {
                type: 'boolean',
                value: match(comparisonFunction)
                    .with('==', () => isEqual(value1, value2))
                    .with('!=', () => !isEqual(value1, value2))
                    .with('<', () => value1 < value2)
                    .with('>', () => value1 > value2)
                    .with('<=', () => value1 <= value2)
                    .with('>=', () => value1 >= value2)
                    .with('and', () => !!(value1 && value2))
                    .with('or', () => !!(value1 || value2))
                    .with('xor', () => !!(value1 ? !value2 : value2))
                    .with('nand', () => !(value1 && value2))
                    .with('nor', () => !(value1 || value2))
                    .with('xnor', () => !(value1 ? !value2 : value2))
                    .exhaustive(),
            },
        };
    }
}
export const compareNode = nodeDefinition(CompareNodeImpl, 'Compare');
