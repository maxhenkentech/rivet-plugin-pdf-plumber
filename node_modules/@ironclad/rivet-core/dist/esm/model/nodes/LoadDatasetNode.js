import { NodeImpl } from '../NodeImpl.js';
import { coerceTypeOptional, dedent, newId } from '../../utils/index.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class LoadDatasetNodeImpl extends NodeImpl {
    static create() {
        return {
            id: newId(),
            type: 'loadDataset',
            title: 'Load Dataset',
            visualData: { x: 0, y: 0, width: 250 },
            data: {
                datasetId: '',
            },
        };
    }
    getInputDefinitions() {
        const inputs = [];
        if (this.data.useDatasetIdInput) {
            inputs.push({
                id: 'datasetId',
                title: 'Dataset ID',
                dataType: 'string',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'dataset',
                title: 'Dataset',
                dataType: 'object[]',
            },
            {
                id: 'datasetId_out',
                title: 'Dataset ID',
                dataType: 'string',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Loads a dataset with the provided ID. If the dataset does not exist, it throws an error.
      `,
            infoBoxTitle: 'Load Dataset Node',
            contextMenuTitle: 'Load Dataset',
            group: ['Input/Output'],
        };
    }
    getEditors() {
        return [
            {
                type: 'datasetSelector',
                label: 'Dataset',
                dataKey: 'datasetId',
                useInputToggleDataKey: 'useDatasetIdInput',
            },
        ];
    }
    async process(inputs, context) {
        const { datasetProvider } = context;
        if (datasetProvider == null) {
            throw new Error('datasetProvider is required');
        }
        const datasetId = coerceTypeOptional(inputs['datasetId'], 'string') || this.data.datasetId;
        const dataset = await datasetProvider.getDatasetData(datasetId);
        if (!dataset) {
            throw new Error(`Dataset with ID ${datasetId} does not exist`);
        }
        return {
            ['dataset']: {
                type: 'object[]',
                value: dataset.rows,
            },
            ['datasetId_out']: {
                type: 'string',
                value: datasetId,
            },
        };
    }
}
export const loadDatasetNode = nodeDefinition(LoadDatasetNodeImpl, 'Load Dataset');
