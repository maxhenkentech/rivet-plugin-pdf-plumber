import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../DataValue.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { coerceTypeOptional } from '../../utils/coerceType.js';
import { interpolate } from '../../utils/interpolation.js';
export class TextNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'text',
            title: 'Text',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 300,
            },
            data: {
                text: '{{input}}',
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        // Extract inputs from text, everything like {{input}}
        const inputNames = [...new Set(this.chartNode.data.text.match(/\{\{([^}]+)\}\}/g))];
        return (inputNames?.map((inputName) => {
            return {
                type: 'string',
                // id and title should not have the {{ and }}
                id: inputName.slice(2, -2),
                title: inputName.slice(2, -2),
                dataType: 'string',
                required: false,
            };
        }) ?? []);
    }
    getOutputDefinitions() {
        return [
            {
                id: 'output',
                title: 'Output',
                dataType: 'string',
            },
        ];
    }
    getEditors() {
        return [
            {
                type: 'code',
                label: 'Text',
                dataKey: 'text',
                language: 'prompt-interpolation-markdown',
                theme: 'prompt-interpolation',
            },
        ];
    }
    getBody() {
        const truncated = this.data.text.split('\n').slice(0, 15).join('\n').trim();
        return {
            type: 'colorized',
            language: 'prompt-interpolation-markdown',
            theme: 'prompt-interpolation',
            text: truncated,
        };
    }
    async process(inputs) {
        const inputMap = Object.keys(inputs).reduce((acc, key) => {
            const stringValue = coerceTypeOptional(inputs[key], 'string') ?? '';
            acc[key] = stringValue;
            return acc;
        }, {});
        const outputValue = interpolate(this.chartNode.data.text, inputMap);
        return {
            output: {
                type: 'string',
                value: outputValue,
            },
        };
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Outputs a string of text. It can also interpolate values using <span style="color: var(--primary)">{{tags}}</span>.

        The inputs are dynamic based on the interpolation tags.
      `,
            contextMenuTitle: 'Text',
            infoBoxTitle: 'Text Node',
            group: ['Common', 'Text'],
        };
    }
}
export const textNode = nodeDefinition(TextNodeImpl, 'Text');
