import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../GraphProcessor.js';
import { shuffle } from 'lodash-es';
import { isArrayDataValue } from '../DataValue.js';
import { dedent } from 'ts-dedent';
export class ShuffleNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'shuffle',
            title: 'Shuffle',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 175,
            },
            data: {},
        };
        return chartNode;
    }
    getInputDefinitions() {
        return [
            {
                dataType: 'any[]',
                id: 'array',
                title: 'Array',
            },
        ];
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'any[]',
                id: 'shuffled',
                title: 'Shuffled',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Shuffles the input array. Outputs the shuffled array.
      `,
            infoBoxTitle: 'Shuffle Node',
            contextMenuTitle: 'Shuffle',
            group: ['Lists'],
        };
    }
    async process(inputs) {
        const input = inputs['array'];
        const items = input ? (isArrayDataValue(input) ? input.value : [input.value]) : [];
        const shuffled = shuffle(items);
        return {
            ['shuffled']: {
                type: inputs['array']?.type ?? 'any[]',
                value: shuffled,
            },
        };
    }
}
export const shuffleNode = nodeDefinition(ShuffleNodeImpl, 'Shuffle');
