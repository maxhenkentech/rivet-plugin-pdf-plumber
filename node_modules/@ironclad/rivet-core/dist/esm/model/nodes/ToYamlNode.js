import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
// @ts-ignore
import yaml from 'yaml';
import {} from '../GraphProcessor.js';
import { coerceType } from '../../utils/index.js';
import { dedent } from 'ts-dedent';
import { nodeDefinition } from '../NodeDefinition.js';
export class ToYamlNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'toYaml',
            title: 'To YAML',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 175,
            },
            data: {},
        };
        return chartNode;
    }
    getInputDefinitions() {
        return [
            {
                id: 'object',
                title: 'Object',
                dataType: 'object',
                required: true,
            },
        ];
    }
    getOutputDefinitions() {
        return [
            {
                id: 'yaml',
                title: 'YAML',
                dataType: 'string',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Turns the input object into YAML text.
      `,
            infoBoxTitle: 'To YAML Node',
            contextMenuTitle: 'To YAML',
            group: ['Text'],
        };
    }
    async process(inputs) {
        const object = coerceType(inputs['object'], 'object');
        const toYaml = yaml.stringify(object, null, {
            indent: 2,
            aliasDuplicateObjects: false,
        });
        return {
            ['yaml']: {
                type: 'string',
                value: toYaml,
            },
        };
    }
}
export const toYamlNode = nodeDefinition(ToYamlNodeImpl, 'To YAML');
