import { NodeImpl } from '../NodeImpl.js';
import { dedent, newId } from '../../utils/index.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class GetAllDatasetsNodeImpl extends NodeImpl {
    static create() {
        return {
            id: newId(),
            type: 'getAllDatasets',
            title: 'Get All Datasets',
            visualData: { x: 0, y: 0, width: 250 },
            data: {},
        };
    }
    getInputDefinitions() {
        return [];
    }
    getOutputDefinitions() {
        return [
            {
                id: 'datasets',
                title: 'Datasets',
                dataType: 'object[]',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Retrieves all datasets. If no datasets exist, it returns an empty array.
      `,
            infoBoxTitle: 'Get All Datasets Node',
            contextMenuTitle: 'Get All Datasets',
            group: ['Input/Output'],
        };
    }
    getEditors() {
        return [];
    }
    async process(inputs, context) {
        const { datasetProvider } = context;
        if (datasetProvider == null) {
            throw new Error('datasetProvider is required');
        }
        const datasets = await datasetProvider.getDatasetsForProject(context.project.metadata.id);
        return {
            ['datasets']: {
                type: 'object[]',
                value: datasets,
            },
        };
    }
}
export const getAllDatasetsNode = nodeDefinition(GetAllDatasetsNodeImpl, 'Get All Datasets');
