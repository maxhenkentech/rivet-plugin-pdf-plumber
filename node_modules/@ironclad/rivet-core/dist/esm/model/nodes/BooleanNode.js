import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import {} from '../GraphProcessor.js';
import {} from '../../index.js';
import { dedent } from 'ts-dedent';
import { nodeDefinition } from '../NodeDefinition.js';
import { coerceTypeOptional } from '../../utils/coerceType.js';
export class BooleanNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'boolean',
            title: 'Bool',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 130,
            },
            data: {
                value: false,
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        return this.data.useValueInput
            ? [
                {
                    dataType: 'any',
                    id: 'input',
                    title: 'Input',
                },
            ]
            : [];
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'boolean',
                id: 'value',
                title: 'Value',
            },
        ];
    }
    getEditors() {
        return [{ type: 'toggle', label: 'Value', dataKey: 'value', useInputToggleDataKey: 'useValueInput' }];
    }
    getBody() {
        return this.data.useValueInput ? `(Input to bool)` : (this.data.value ?? false).toString();
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Outputs a boolean constant, or converts an input value into a boolean.
      `,
            infoBoxTitle: 'Bool Node',
            contextMenuTitle: 'Bool',
            group: ['Data'],
        };
    }
    async process(inputs) {
        const value = this.data.useValueInput
            ? coerceTypeOptional(inputs['input'], 'boolean') ?? this.data.value ?? false
            : this.data.value ?? false;
        return {
            ['value']: {
                type: 'boolean',
                value,
            },
        };
    }
}
export const booleanNode = nodeDefinition(BooleanNodeImpl, 'Boolean');
