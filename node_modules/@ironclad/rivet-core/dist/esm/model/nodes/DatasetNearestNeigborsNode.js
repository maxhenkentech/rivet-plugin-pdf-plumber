import { NodeImpl } from '../NodeImpl.js';
import { coerceType, dedent, getInputOrData, newId } from '../../utils/index.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class DatasetNearestNeighborsNodeImpl extends NodeImpl {
    static create() {
        return {
            id: newId(),
            type: 'datasetNearestNeighbors',
            title: 'KNN Dataset',
            visualData: { x: 0, y: 0, width: 250 },
            data: {
                datasetId: '',
                k: 5,
            },
        };
    }
    getInputDefinitions() {
        const inputs = [
            {
                id: 'embedding',
                title: 'Embedding',
                dataType: 'object',
            },
        ];
        if (this.data.useDatasetIdInput) {
            inputs.push({
                id: 'datasetId',
                title: 'Dataset ID',
                dataType: 'string',
            });
        }
        if (this.data.useKInput) {
            inputs.push({
                id: 'k',
                title: 'K',
                dataType: 'number',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'nearestNeighbors',
                title: 'Nearest Neighbors',
                dataType: 'object[]',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Finds the k nearest neighbors in the dataset with the provided ID, given an embedding.
      `,
            infoBoxTitle: 'KNN Dataset Node',
            contextMenuTitle: 'KNN Dataset',
            group: ['Input/Output'],
        };
    }
    getEditors() {
        return [
            {
                type: 'datasetSelector',
                label: 'Dataset',
                dataKey: 'datasetId',
                useInputToggleDataKey: 'useDatasetIdInput',
            },
            {
                type: 'number',
                label: 'K',
                dataKey: 'k',
                useInputToggleDataKey: 'useKInput',
            },
        ];
    }
    async process(inputs, context) {
        const { datasetProvider } = context;
        if (datasetProvider == null) {
            throw new Error('datasetProvider is required');
        }
        const datasetId = getInputOrData(this.data, inputs, 'datasetId');
        const k = getInputOrData(this.data, inputs, 'k', 'number');
        const embedding = coerceType(inputs['embedding'], 'vector');
        const nearestNeighbors = await datasetProvider.knnDatasetRows(datasetId, k, embedding);
        return {
            ['nearestNeighbors']: {
                type: 'object[]',
                value: nearestNeighbors.map((neighbor) => ({
                    id: neighbor.id,
                    distance: neighbor.distance,
                    data: neighbor.data,
                })),
            },
        };
    }
}
export const datasetNearestNeighborsNode = nodeDefinition(DatasetNearestNeighborsNodeImpl, 'Dataset Nearest Neighbors');
