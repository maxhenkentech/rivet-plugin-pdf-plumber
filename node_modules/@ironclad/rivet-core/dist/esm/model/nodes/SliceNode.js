import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import {} from '../GraphProcessor.js';
import { entries } from '../../utils/typeSafety.js';
import { dedent } from 'ts-dedent';
import {} from '../EditorDefinition.js';
import {} from '../../index.js';
import { coerceType } from '../../utils/coerceType.js';
export class SliceNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'slice',
            title: 'Slice',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 200,
            },
            data: {
                start: 0,
                count: undefined,
            },
        };
        return chartNode;
    }
    getInputDefinitions() {
        const inputs = [
            {
                dataType: 'any[]',
                id: 'input',
                title: 'Input',
            },
        ];
        if (this.data.useStartInput) {
            inputs.push({
                dataType: 'number',
                id: 'start',
                title: 'Start',
            });
        }
        if (this.data.useCountInput) {
            inputs.push({
                dataType: 'number',
                id: 'count',
                title: 'Count',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                dataType: 'any[]',
                id: 'output',
                title: 'Output',
            },
        ];
    }
    getEditors() {
        return [
            { type: 'number', label: 'Start', dataKey: 'start', allowEmpty: true },
            { type: 'number', label: 'Count', dataKey: 'count', allowEmpty: true },
        ];
    }
    getBody() {
        return dedent `
      Start: ${this.data.useStartInput ? '(Using Input)' : this.data.start == null ? '0' : this.data.start}
      Count: ${this.data.useCountInput ? '(Using Input)' : this.data.count == null ? 'All' : this.data.count}
    `;
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Slices an array from the start index for the count number of elements.

        Useful for extracting a portion of an array.
      `,
            infoBoxTitle: 'Slice Node',
            contextMenuTitle: 'Slice',
            group: ['Lists'],
        };
    }
    async process(inputs) {
        const inputArray = coerceType(inputs['input'], 'any[]');
        const start = this.data.start ?? 0;
        const count = this.data.count ?? inputArray.length;
        const outputArray = inputArray.slice(start, start + count);
        return {
            ['output']: {
                type: 'any[]',
                value: outputArray,
            },
        };
    }
}
export const sliceNode = nodeDefinition(SliceNodeImpl, 'Slice');
