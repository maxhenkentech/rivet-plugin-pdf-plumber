import {} from '../NodeBase.js';
import { nanoid } from 'nanoid/non-secure';
import { NodeImpl } from '../NodeImpl.js';
import { nodeDefinition } from '../NodeDefinition.js';
import { expectType } from '../../utils/expectType.js';
import { dedent } from 'ts-dedent';
export class ExtractMarkdownCodeBlocksNodeImpl extends NodeImpl {
    static create() {
        const chartNode = {
            type: 'extractMarkdownCodeBlocks',
            title: 'Extract Markdown Code Blocks',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {},
        };
        return chartNode;
    }
    getInputDefinitions() {
        return [
            {
                id: 'input',
                title: 'Input',
                dataType: 'string',
                required: true,
            },
        ];
    }
    getOutputDefinitions() {
        return [
            {
                id: 'firstBlock',
                title: 'First Block',
                dataType: 'string',
            },
            {
                id: 'allBlocks',
                title: 'All Blocks',
                dataType: 'string[]',
            },
            {
                id: 'languages',
                title: 'Languages',
                dataType: 'string[]',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Extracts the code blocks in the input Markdown text.

        Outputs the first matched block, all matched blocks, and the languages specified for the blocks.
      `,
            infoBoxTitle: 'Extract Markdown Code Blocks Node',
            contextMenuTitle: 'Extract Markdown Code Blocks',
            group: ['Text'],
        };
    }
    async process(inputs) {
        const inputString = expectType(inputs['input'], 'string');
        const regex = /```(\w*)\n([\s\S]*?)```/g;
        let match;
        let firstBlock;
        const allBlocks = [];
        const languages = [];
        while ((match = regex.exec(inputString)) !== null) {
            const language = match[1];
            const block = match[2];
            if (!firstBlock) {
                firstBlock = block;
            }
            allBlocks.push(block);
            languages.push(language);
        }
        return {
            ['firstBlock']: firstBlock == null
                ? {
                    type: 'control-flow-excluded',
                    value: undefined,
                }
                : {
                    type: 'string',
                    value: firstBlock,
                },
            ['allBlocks']: {
                type: 'string[]',
                value: allBlocks,
            },
            ['languages']: {
                type: 'string[]',
                value: languages,
            },
        };
    }
}
export const extractMarkdownCodeBlocksNode = nodeDefinition(ExtractMarkdownCodeBlocksNodeImpl, 'Extract Markdown Code Blocks');
