import { NodeImpl } from '../NodeImpl.js';
import { dedent, getInputOrData, newId } from '../../utils/index.js';
import { nodeDefinition } from '../NodeDefinition.js';
export class GetDatasetRowNodeImpl extends NodeImpl {
    static create() {
        return {
            id: newId(),
            type: 'getDatasetRow',
            title: 'Get Dataset Row',
            visualData: { x: 0, y: 0, width: 250 },
            data: {
                datasetId: '',
                rowId: '',
            },
        };
    }
    getInputDefinitions() {
        const inputs = [];
        if (this.data.useRowIdInput) {
            inputs.push({
                id: 'rowId',
                title: 'Row ID',
                dataType: 'string',
            });
        }
        if (this.data.useDatasetIdInput) {
            inputs.push({
                id: 'datasetId',
                title: 'Dataset ID',
                dataType: 'string',
            });
        }
        return inputs;
    }
    getOutputDefinitions() {
        return [
            {
                id: 'row',
                title: 'Row',
                dataType: 'object',
            },
        ];
    }
    static getUIData() {
        return {
            infoBoxBody: dedent `
        Gets a row from a dataset with the provided ID. If the dataset or row does not exist, it throws an error.
      `,
            infoBoxTitle: 'Get Dataset Row Node',
            contextMenuTitle: 'Get Dataset Row',
            group: ['Input/Output'],
        };
    }
    getEditors() {
        return [
            {
                type: 'datasetSelector',
                label: 'Dataset',
                dataKey: 'datasetId',
                useInputToggleDataKey: 'useDatasetIdInput',
            },
            {
                type: 'string',
                label: 'Row ID',
                dataKey: 'rowId',
                useInputToggleDataKey: 'useRowIdInput',
            },
        ];
    }
    async process(inputs, context) {
        const { datasetProvider } = context;
        if (datasetProvider == null) {
            throw new Error('datasetProvider is required');
        }
        const datasetId = getInputOrData(this.data, inputs, 'datasetId', 'string');
        const rowId = getInputOrData(this.data, inputs, 'rowId', 'string');
        const dataset = await datasetProvider.getDatasetData(datasetId);
        if (!dataset) {
            throw new Error(`Dataset with ID ${datasetId} does not exist`);
        }
        // TODO be more efficient
        const row = dataset.rows.find((r) => r.id === rowId);
        if (!row) {
            return {
                ['row']: {
                    type: 'control-flow-excluded',
                    value: undefined,
                },
            };
        }
        return {
            ['row']: {
                type: 'object',
                value: row,
            },
        };
    }
}
export const getDatasetRowNode = nodeDefinition(GetDatasetRowNodeImpl, 'Get Dataset Row');
