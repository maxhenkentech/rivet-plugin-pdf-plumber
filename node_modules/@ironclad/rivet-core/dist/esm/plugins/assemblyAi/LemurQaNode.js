import { nanoid } from 'nanoid/non-secure';
import { dedent } from 'ts-dedent';
import {} from '../../index.js';
import { getApiKey, getLemurParams, lemurEditorDefinitions, lemurTranscriptIdsInputDefinition, } from './lemurHelpers.js';
import { coerceType } from '../../utils/coerceType.js';
import { pluginNodeDefinition } from '../../model/NodeDefinition.js';
import { AssemblyAI } from 'assemblyai';
export const LemurQaNodeImpl = {
    create() {
        const chartNode = {
            type: 'assemblyAiLemurQa',
            title: 'LeMUR Question & Answers',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {
                final_model: 'default',
            },
        };
        return chartNode;
    },
    getInputDefinitions() {
        return [
            lemurTranscriptIdsInputDefinition,
            {
                id: 'questions',
                dataType: ['string', 'string[]', 'object', 'object[]', 'any', 'any[]'],
                title: 'Questions',
            },
            {
                id: 'context',
                dataType: 'string',
                title: 'Context',
            },
        ];
    },
    getOutputDefinitions() {
        return [
            {
                dataType: 'object[]',
                id: 'response',
                title: 'Response',
            },
        ];
    },
    getEditors() {
        return [
            {
                type: 'string',
                label: 'Context',
                dataKey: 'context',
            },
            ...lemurEditorDefinitions,
            {
                type: 'string',
                label: 'Questions Answer Format',
                dataKey: 'questions_answer_format',
            },
            {
                type: 'string',
                label: 'Questions Context',
                dataKey: 'questions_context',
            },
            {
                type: 'string',
                label: 'Questions Answer Options',
                dataKey: 'questions_answer_options',
            },
        ];
    },
    getBody() {
        return '';
    },
    getUIData() {
        return {
            infoBoxBody: dedent `Use AssemblyAI LeMUR to ask questions about transcripts`,
            infoBoxTitle: 'Use AssemblyAI LeMUR Question & Answer',
            contextMenuTitle: 'LeMUR Q&A',
            group: ['AI', 'AssemblyAI'],
        };
    },
    async process(data, inputs, context) {
        const apiKey = getApiKey(context);
        const client = new AssemblyAI({ apiKey });
        const questions = getQuestions(inputs).map((question) => applyQuestionEditors(data, question));
        const params = {
            questions,
            ...getLemurParams(inputs, data),
        };
        const { response } = await client.lemur.questionAnswer(params);
        return {
            ['response']: {
                type: 'object[]',
                value: response,
            },
        };
    },
};
function getQuestions(inputs) {
    const input = inputs['questions'];
    if (!input)
        throw new Error('Questions are required.');
    if (input.type === 'string') {
        return [
            {
                question: coerceType(input, 'string'),
            },
        ];
    }
    else if (input.type === 'string[]') {
        return coerceType(input, 'string[]').map((question) => ({ question }));
    }
    else if (input.type === 'object') {
        return [coerceType(input, 'object')];
    }
    else if (input.type === 'object[]') {
        return coerceType(input, 'object[]');
    }
    else if (input.type === 'any' && typeof input.value === 'string') {
        return [
            {
                question: coerceType(input, 'string'),
            },
        ];
    }
    else if ((input.type === 'any' && Array.isArray(input.value)) || input.type === 'any[]') {
        return input.value.map((question) => {
            if (typeof question === 'string') {
                return { question };
            }
            else if (typeof question === 'object') {
                return question;
            }
            else {
                throw new Error('Question must be a string or object.');
            }
        });
    }
    throw new Error('Questions must be a string, string[], a question object, or an array of question objects.');
}
function applyQuestionEditors(data, question) {
    if (!('answer_format' in question) && data.questions_answer_format) {
        question.answer_format = data.questions_answer_format;
    }
    if (!('answer_options' in question) && data.questions_answer_options) {
        question.answer_options = data.questions_answer_options.split(';');
    }
    if (!('context' in question) && data.questions_context) {
        question.context = data.questions_context;
    }
    return question;
}
export const lemurQaNode = pluginNodeDefinition(LemurQaNodeImpl, 'LeMUR Q&A');
