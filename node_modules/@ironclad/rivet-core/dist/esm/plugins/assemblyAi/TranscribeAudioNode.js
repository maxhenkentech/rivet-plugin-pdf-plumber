import { nanoid } from 'nanoid/non-secure';
import { dedent } from 'ts-dedent';
import { AssemblyAI } from 'assemblyai';
import {} from '../../index.js';
import { getApiKey } from './lemurHelpers.js';
import { pluginNodeDefinition } from '../../model/NodeDefinition.js';
import { coerceType } from '../../utils/coerceType.js';
export const TranscribeAudioNodeImpl = {
    create() {
        const chartNode = {
            type: 'assemblyAiTranscribeAudio',
            title: 'Transcribe Audio',
            id: nanoid(),
            visualData: {
                x: 0,
                y: 0,
                width: 250,
            },
            data: {},
        };
        return chartNode;
    },
    getInputDefinitions() {
        return [
            {
                id: 'audio',
                dataType: ['audio', 'string'],
                title: 'Audio',
            },
        ];
    },
    getOutputDefinitions() {
        return [
            {
                dataType: 'string',
                id: 'text',
                title: 'Transcript text',
            },
            {
                dataType: 'string',
                id: 'id',
                title: 'Transcript ID',
            },
            {
                dataType: 'object',
                id: 'transcript',
                title: 'Transcript object',
            },
        ];
    },
    getEditors() {
        return [];
    },
    getBody() {
        return '';
    },
    getUIData() {
        return {
            infoBoxBody: dedent `Use AssemblyAI to transcribe audio`,
            infoBoxTitle: 'Transcribe Audio Node',
            contextMenuTitle: 'Transcribe Audio',
            group: ['AI', 'AssemblyAI'],
        };
    },
    async process(data, inputs, context) {
        const input = inputs['audio'];
        if (!input)
            throw new Error('Audio input is required.');
        const apiKey = getApiKey(context);
        const client = new AssemblyAI({ apiKey });
        let audioUrl;
        if (input.type === 'audio') {
            const audio = coerceType(inputs['audio'], 'audio');
            audioUrl = await client.files.upload(audio.data);
        }
        else if (input.type === 'string' || input.type === 'any') {
            audioUrl = coerceType(inputs['audio'], 'string');
        }
        else {
            throw new Error('Audio input must be audio or string containing the audio URL.');
        }
        validateUrl(audioUrl);
        const transcript = await client.transcripts.create({ audio_url: audioUrl });
        return {
            ['text']: {
                type: 'string',
                value: transcript.text,
            },
            ['id']: {
                type: 'string',
                value: transcript.id,
            },
            ['transcript']: {
                type: 'object',
                value: transcript,
            },
        };
    },
};
function validateUrl(audioUrl) {
    if (audioUrl === null)
        throw new Error('Audio URL cannot be null.');
    if (audioUrl === undefined)
        throw new Error('Audio URL cannot be undefined.');
    if (audioUrl === '')
        throw new Error('Audio URL is cannot be empty.');
    try {
        const url = new URL(audioUrl);
        if (url.protocol === 'http:' || url.protocol === 'https:') {
            return true;
        }
        else {
            throw new Error('Audio URL must start with http:// or https://');
        }
    }
    catch {
        throw new Error('Audio URL is invalid.');
    }
}
export const transcribeAudioNode = pluginNodeDefinition(TranscribeAudioNodeImpl, 'Transcribe Audio');
