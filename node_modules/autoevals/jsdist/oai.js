"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cachedChatCompletion = void 0;
const openai_1 = require("openai");
const env_js_1 = require("./env.js");
const util_js_1 = require("./util.js");
function cachedChatCompletion(params, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { cache, openAiApiKey, openAiOrganizationId } = options;
        return yield (0, util_js_1.currentSpan)().traced("OpenAI Completion", (span) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            let cached = false;
            let ret = yield (cache === null || cache === void 0 ? void 0 : cache.get(params));
            if (ret) {
                cached = true;
            }
            else {
                const openai = new openai_1.OpenAI({
                    apiKey: openAiApiKey || env_js_1.Env.OPENAI_API_KEY,
                    organization: openAiOrganizationId,
                });
                if (openai === null) {
                    throw new Error("OPENAI_API_KEY not set");
                }
                const completion = yield openai.chat.completions.create(params);
                yield (cache === null || cache === void 0 ? void 0 : cache.set(params, completion));
                ret = completion;
            }
            const { messages } = params, rest = __rest(params, ["messages"]);
            span.log({
                input: messages,
                metadata: Object.assign(Object.assign({}, rest), { cached }),
                output: ret.choices[0],
                metrics: {
                    tokens: (_a = ret.usage) === null || _a === void 0 ? void 0 : _a.total_tokens,
                    prompt_tokens: (_b = ret.usage) === null || _b === void 0 ? void 0 : _b.prompt_tokens,
                    completion_tokens: (_c = ret.usage) === null || _c === void 0 ? void 0 : _c.completion_tokens,
                },
            });
            return ret;
        }));
    });
}
exports.cachedChatCompletion = cachedChatCompletion;
