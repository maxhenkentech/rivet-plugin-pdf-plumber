/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.22.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from "../base";
import { ExpandedTestResult } from "../models";
import { RunRequest } from "../models";
import { RunResponse } from "../models";
import { UpdateTestCase } from "../models";
import { V1FilesUploadPost201Response } from "../models";
import { V1PipelinesGet200Response } from "../models";
import { V1TestCaseGet200Response } from "../models";
import { V1TestCasePatch200Response } from "../models";
import { V1TestCasePost200Response } from "../models";
import { V1TestCasePostRequest } from "../models";
import { V1TestResultGet200Response } from "../models";
import { V1TestResultPost200Response } from "../models";
import { V1TestResultPostRequest } from "../models";
import { V1TestResultSimplePostRequest } from "../models";
import { V1TestResultStatusGet200Response } from "../models";
/**
 * V1Api - axios parameter creator
 * @export
 */
export declare const V1ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Upload an image file
     * @param {string} [org] (If not using an organization API Key) the ID of the organization
     * @param {File} [file] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1FilesUploadPost: (org?: string, file?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {string} [slug] The slug to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PipelinesGet: (label?: string, slug?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RunPost: (runRequest: RunRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCaseGet: (pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update an existing test case
     * @param {UpdateTestCase} updateTestCase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCasePatch: (updateTestCase: UpdateTestCase, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new test case
     * @param {V1TestCasePostRequest} v1TestCasePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCasePost: (v1TestCasePostRequest: V1TestCasePostRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get test results for a pipeline
     * @param {string} pipelineSlug The slug of the pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultGet: (pipelineSlug: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Fetch test result by ID
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultIdGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new test result from runs
     * @param {V1TestResultPostRequest} v1TestResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultPost: (v1TestResultPostRequest: V1TestResultPostRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new test result from test runs
     * @param {V1TestResultSimplePostRequest} v1TestResultSimplePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultSimplePost: (v1TestResultSimplePostRequest: V1TestResultSimplePostRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get status of the test result
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultStatusGet: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * V1Api - functional programming interface
 * @export
 */
export declare const V1ApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Upload an image file
     * @param {string} [org] (If not using an organization API Key) the ID of the organization
     * @param {File} [file] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1FilesUploadPost(org?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1FilesUploadPost201Response>>;
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {string} [slug] The slug to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PipelinesGet(label?: string, slug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1PipelinesGet200Response>>;
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RunPost(runRequest: RunRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResponse>>;
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCaseGet(pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestCaseGet200Response>>;
    /**
     *
     * @summary Update an existing test case
     * @param {UpdateTestCase} updateTestCase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCasePatch(updateTestCase: UpdateTestCase, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestCasePatch200Response>>;
    /**
     *
     * @summary Create a new test case
     * @param {V1TestCasePostRequest} v1TestCasePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCasePost(v1TestCasePostRequest: V1TestCasePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestCasePost200Response>>;
    /**
     *
     * @summary Get test results for a pipeline
     * @param {string} pipelineSlug The slug of the pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultGet(pipelineSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestResultGet200Response>>;
    /**
     *
     * @summary Fetch test result by ID
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpandedTestResult>>;
    /**
     *
     * @summary Create a new test result from runs
     * @param {V1TestResultPostRequest} v1TestResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultPost(v1TestResultPostRequest: V1TestResultPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestResultPost200Response>>;
    /**
     *
     * @summary Create a new test result from test runs
     * @param {V1TestResultSimplePostRequest} v1TestResultSimplePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultSimplePost(v1TestResultSimplePostRequest: V1TestResultSimplePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestResultPost200Response>>;
    /**
     *
     * @summary Get status of the test result
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultStatusGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TestResultStatusGet200Response>>;
};
/**
 * V1Api - factory interface
 * @export
 */
export declare const V1ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Upload an image file
     * @param {string} [org] (If not using an organization API Key) the ID of the organization
     * @param {File} [file] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1FilesUploadPost(org?: string, file?: File, options?: any): AxiosPromise<V1FilesUploadPost201Response>;
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {string} [slug] The slug to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1PipelinesGet(label?: string, slug?: string, options?: any): AxiosPromise<V1PipelinesGet200Response>;
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1RunPost(runRequest: RunRequest, options?: any): AxiosPromise<RunResponse>;
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCaseGet(pipelineId?: string, pipelineSlug?: string, options?: any): AxiosPromise<V1TestCaseGet200Response>;
    /**
     *
     * @summary Update an existing test case
     * @param {UpdateTestCase} updateTestCase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCasePatch(updateTestCase: UpdateTestCase, options?: any): AxiosPromise<V1TestCasePatch200Response>;
    /**
     *
     * @summary Create a new test case
     * @param {V1TestCasePostRequest} v1TestCasePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestCasePost(v1TestCasePostRequest: V1TestCasePostRequest, options?: any): AxiosPromise<V1TestCasePost200Response>;
    /**
     *
     * @summary Get test results for a pipeline
     * @param {string} pipelineSlug The slug of the pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultGet(pipelineSlug: string, options?: any): AxiosPromise<V1TestResultGet200Response>;
    /**
     *
     * @summary Fetch test result by ID
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultIdGet(id: string, options?: any): AxiosPromise<ExpandedTestResult>;
    /**
     *
     * @summary Create a new test result from runs
     * @param {V1TestResultPostRequest} v1TestResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultPost(v1TestResultPostRequest: V1TestResultPostRequest, options?: any): AxiosPromise<V1TestResultPost200Response>;
    /**
     *
     * @summary Create a new test result from test runs
     * @param {V1TestResultSimplePostRequest} v1TestResultSimplePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultSimplePost(v1TestResultSimplePostRequest: V1TestResultSimplePostRequest, options?: any): AxiosPromise<V1TestResultPost200Response>;
    /**
     *
     * @summary Get status of the test result
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v1TestResultStatusGet(id: string, options?: any): AxiosPromise<V1TestResultStatusGet200Response>;
};
/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export declare class V1Api extends BaseAPI {
    /**
     *
     * @summary Upload an image file
     * @param {string} [org] (If not using an organization API Key) the ID of the organization
     * @param {File} [file] The file to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1FilesUploadPost(org?: string, file?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1FilesUploadPost201Response, any>>;
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {string} [slug] The slug to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1PipelinesGet(label?: string, slug?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1PipelinesGet200Response, any>>;
    /**
     *
     * @summary Create a run
     * @param {RunRequest} runRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1RunPost(runRequest: RunRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunResponse, any>>;
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestCaseGet(pipelineId?: string, pipelineSlug?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestCaseGet200Response, any>>;
    /**
     *
     * @summary Update an existing test case
     * @param {UpdateTestCase} updateTestCase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestCasePatch(updateTestCase: UpdateTestCase, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestCasePatch200Response, any>>;
    /**
     *
     * @summary Create a new test case
     * @param {V1TestCasePostRequest} v1TestCasePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestCasePost(v1TestCasePostRequest: V1TestCasePostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestCasePost200Response, any>>;
    /**
     *
     * @summary Get test results for a pipeline
     * @param {string} pipelineSlug The slug of the pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestResultGet(pipelineSlug: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestResultGet200Response, any>>;
    /**
     *
     * @summary Fetch test result by ID
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestResultIdGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExpandedTestResult, any>>;
    /**
     *
     * @summary Create a new test result from runs
     * @param {V1TestResultPostRequest} v1TestResultPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestResultPost(v1TestResultPostRequest: V1TestResultPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestResultPost200Response, any>>;
    /**
     *
     * @summary Create a new test result from test runs
     * @param {V1TestResultSimplePostRequest} v1TestResultSimplePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestResultSimplePost(v1TestResultSimplePostRequest: V1TestResultSimplePostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestResultPost200Response, any>>;
    /**
     *
     * @summary Get status of the test result
     * @param {string} id The ID of the test result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    v1TestResultStatusGet(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V1TestResultStatusGet200Response, any>>;
}
