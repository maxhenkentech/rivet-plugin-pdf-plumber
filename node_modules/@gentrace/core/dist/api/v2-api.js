'use strict';

var axiosInstance = require('../axios-instance.js');
var common = require('../common.js');
var base = require('../base.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Gentrace API
 * These API routes are designed to ingest events from clients.
 *
 * The version of the OpenAPI document: 0.22.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * V2Api - axios parameter creator
 * @export
 */
const V2ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get pipelines, optionally filtered by label
         * @param {string} [label] The label to filter pipelines by
         * @param {SearchableStringInput} [slug] The slug to filter pipelines by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PipelinesGet: (label, slug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (label !== undefined) {
                localVarQueryParameter["label"] = label;
            }
            if (slug !== undefined) {
                localVarQueryParameter["slug"] = slug;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get test cases for a pipeline
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesGet: (pipelineId, pipelineSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/test-cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get test results for a pipeline
         * @param {string} [pipelineId] The ID of the pipeline
         * @param {string} [pipelineSlug] The slug of the pipeline
         * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
         * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestResultsGet: (pipelineId, pipelineSlug, createdAt, metadata, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v2/test-results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield common.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (pipelineId !== undefined) {
                localVarQueryParameter["pipelineId"] = pipelineId;
            }
            if (pipelineSlug !== undefined) {
                localVarQueryParameter["pipelineSlug"] = pipelineSlug;
            }
            if (createdAt !== undefined) {
                localVarQueryParameter["createdAt"] = createdAt;
            }
            if (metadata !== undefined) {
                localVarQueryParameter["metadata"] = metadata;
            }
            common.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * V2Api - functional programming interface
 * @export
 */
const V2ApiFp = function (configuration) {
    const localVarAxiosParamCreator = V2ApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get pipelines, optionally filtered by label
         * @param {string} [label] The label to filter pipelines by
         * @param {SearchableStringInput} [slug] The slug to filter pipelines by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PipelinesGet(label, slug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2PipelinesGet(label, slug, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get test cases for a pipeline
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesGet(pipelineId, pipelineSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2TestCasesGet(pipelineId, pipelineSlug, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get test results for a pipeline
         * @param {string} [pipelineId] The ID of the pipeline
         * @param {string} [pipelineSlug] The slug of the pipeline
         * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
         * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options);
                return common.createRequestFunction(localVarAxiosArgs, axiosInstance, base.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * V2Api - factory interface
 * @export
 */
const V2ApiFactory = function (configuration, basePath, axios) {
    const localVarFp = V2ApiFp(configuration);
    return {
        /**
         *
         * @summary Get pipelines, optionally filtered by label
         * @param {string} [label] The label to filter pipelines by
         * @param {SearchableStringInput} [slug] The slug to filter pipelines by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PipelinesGet(label, slug, options) {
            return localVarFp
                .v2PipelinesGet(label, slug, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get test cases for a pipeline
         * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
         * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestCasesGet(pipelineId, pipelineSlug, options) {
            return localVarFp
                .v2TestCasesGet(pipelineId, pipelineSlug, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get test results for a pipeline
         * @param {string} [pipelineId] The ID of the pipeline
         * @param {string} [pipelineSlug] The slug of the pipeline
         * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
         * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options) {
            return localVarFp
                .v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * V2Api - object-oriented interface
 * @export
 * @class V2Api
 * @extends {BaseAPI}
 */
class V2Api extends base.BaseAPI {
    /**
     *
     * @summary Get pipelines, optionally filtered by label
     * @param {string} [label] The label to filter pipelines by
     * @param {SearchableStringInput} [slug] The slug to filter pipelines by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2PipelinesGet(label, slug, options) {
        return V2ApiFp(this.configuration)
            .v2PipelinesGet(label, slug, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get test cases for a pipeline
     * @param {string} [pipelineId] The ID of the Pipeline to retrieve test cases for
     * @param {string} [pipelineSlug] The slug of the Pipeline to retrieve test cases for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestCasesGet(pipelineId, pipelineSlug, options) {
        return V2ApiFp(this.configuration)
            .v2TestCasesGet(pipelineId, pipelineSlug, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get test results for a pipeline
     * @param {string} [pipelineId] The ID of the pipeline
     * @param {string} [pipelineSlug] The slug of the pipeline
     * @param {SearchableUnixSecondsInput} [createdAt] Criteria to search by creation date
     * @param {{ [key: string]: FilterableMetadataInputValue; }} [metadata] Criteria to search by metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2Api
     */
    v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options) {
        return V2ApiFp(this.configuration)
            .v2TestResultsGet(pipelineId, pipelineSlug, createdAt, metadata, options)
            .then((request) => request(this.axios, this.basePath));
    }
}

exports.V2Api = V2Api;
exports.V2ApiAxiosParamCreator = V2ApiAxiosParamCreator;
exports.V2ApiFactory = V2ApiFactory;
exports.V2ApiFp = V2ApiFp;
//# sourceMappingURL=v2-api.js.map
