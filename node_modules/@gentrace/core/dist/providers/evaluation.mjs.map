{"version":3,"file":"evaluation.mjs","sources":["evaluation.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { GENTRACE_BRANCH, GENTRACE_COMMIT, GENTRACE_RESULT_NAME, GENTRACE_RUN_NAME, globalGentraceApi, } from \"./init\";\nimport { decrementTestCounter, getProcessEnv, incrementTestCounter, } from \"./utils\";\n/**\n * Retrieves test cases for a given pipeline ID from the Gentrace API\n * @async\n * @param {string} pipelineSlug - The pipeline slug\n * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.\n * @returns {Promise<Array<TestCase>>} A Promise that resolves with an array of test cases.\n */\nexport const getTestCases = (pipelineSlug) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    let pipelineId = pipelineSlug;\n    if (!isUUID(pipelineSlug)) {\n        const allPipelines = yield getPipelines();\n        const matchingPipeline = allPipelines.find((pipeline) => pipeline.slug === pipelineSlug);\n        if (!matchingPipeline) {\n            throw new Error(`Could not find the specified pipeline (${pipelineSlug})`);\n        }\n        pipelineId = matchingPipeline.id;\n    }\n    const response = yield globalGentraceApi.v1TestCaseGet(pipelineId);\n    const testCases = (_a = response.data.testCases) !== null && _a !== void 0 ? _a : [];\n    return testCases;\n});\nfunction isTestCaseSingle(response) {\n    return response.caseId !== undefined;\n}\n/**\n * Creates a single test case for a given pipeline ID from the Gentrace API\n *\n * @async\n * @param {CreateSingleTestCase} payload - New test case payload\n * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.\n * @returns {Promise<string>} A Promise that resolves to the created case ID\n */\nexport const createTestCase = (payload) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const { pipelineSlug } = payload;\n    let pipelineId = pipelineSlug;\n    if (!isUUID(pipelineSlug)) {\n        const allPipelines = yield getPipelines();\n        const matchingPipeline = allPipelines.find((pipeline) => pipeline.slug === pipelineSlug);\n        if (!matchingPipeline) {\n            throw new Error(`Could not find the specified pipeline (${pipelineSlug})`);\n        }\n        pipelineId = matchingPipeline.id;\n    }\n    const response = yield globalGentraceApi.v1TestCasePost(payload);\n    const data = response.data;\n    if (!isTestCaseSingle(data)) {\n        throw new Error(\"Expected a single test case to be created.\");\n    }\n    return data.caseId;\n});\n/**\n * Creates multiple test cases for a given pipeline ID from the Gentrace API\n *\n * @async\n * @param {CreateMultipleTestCases} payload - New test case payloads\n * @throws {Error} Throws an error if the SDK is not initialized. Call init() first.\n * @returns {Promise<stringl>} A Promise that resolves to the number of test cases successfully created\n */\nexport const createTestCases = (payload) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const { pipelineSlug } = payload;\n    let pipelineId = pipelineSlug;\n    if (!isUUID(pipelineSlug)) {\n        const allPipelines = yield getPipelines();\n        const matchingPipeline = allPipelines.find((pipeline) => pipeline.slug === pipelineSlug);\n        if (!matchingPipeline) {\n            throw new Error(`Could not find the specified pipeline (${pipelineSlug})`);\n        }\n        pipelineId = matchingPipeline.id;\n    }\n    const response = yield globalGentraceApi.v1TestCasePost(payload);\n    const data = response.data;\n    if (isTestCaseSingle(data)) {\n        throw new Error(\"Expected multiple test cases to be created.\");\n    }\n    return data.creationCount;\n});\nexport const updateTestCase = (payload) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const { id } = payload;\n    if (!isUUID(id)) {\n        throw new Error(\"Expected a valid test case ID.\");\n    }\n    const response = yield globalGentraceApi.v1TestCasePatch(payload);\n    const data = response.data;\n    return data.caseId;\n});\nexport const constructSubmissionPayload = (pipelineId, testRuns, context) => {\n    const body = {\n        pipelineId,\n        testRuns,\n    };\n    // Will be overwritten if GENTRACE_RESULT_NAME is specified\n    if (GENTRACE_RUN_NAME) {\n        body.name = GENTRACE_RUN_NAME;\n    }\n    if (GENTRACE_RESULT_NAME) {\n        body.name = GENTRACE_RESULT_NAME;\n    }\n    if (context === null || context === void 0 ? void 0 : context.metadata) {\n        body.metadata = context.metadata;\n    }\n    if (GENTRACE_BRANCH || getProcessEnv(\"GENTRACE_BRANCH\")) {\n        body.branch =\n            GENTRACE_BRANCH.length > 0\n                ? GENTRACE_BRANCH\n                : getProcessEnv(\"GENTRACE_BRANCH\");\n    }\n    if (GENTRACE_COMMIT || getProcessEnv(\"GENTRACE_COMMIT\")) {\n        body.commit =\n            GENTRACE_COMMIT.length > 0\n                ? GENTRACE_COMMIT\n                : getProcessEnv(\"GENTRACE_COMMIT\");\n    }\n    body.collectionMethod = \"runner\";\n    return body;\n};\nfunction isUUID(str) {\n    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\n    return uuidPattern.test(str);\n}\n/**\n * Submits test results by creating TestResult objects from given test cases and corresponding outputs.\n * To use a Gentrace runner to capture intermediate steps, use {@link runTest} instead.\n *\n * @async\n * @function\n * @param {string} pipelineSlug - The slug of the pipeline\n * @param {TestCase[]} testCases - An array of TestCase objects.\n * @param {string[]} outputs - An array of outputs corresponding to each TestCase.\n *\n * @throws {Error} Will throw an error if the Gentrace API key is not initialized. Also, will throw an error if the number of test cases\n *  does not match the number of outputs.\n *\n * @returns {Promise<TestRunPost200Response>} The response data from the Gentrace API's testRunPost method.\n */\nexport const submitTestResult = (pipelineSlug, testCases, outputsList, context) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    if (testCases.length !== outputsList.length) {\n        throw new Error(\"The number of test cases must be equal to the number of outputs.\");\n    }\n    const testRuns = testCases.map((testCase, index) => {\n        const run = {\n            caseId: testCase.id,\n            inputs: testCase.inputs,\n            outputs: outputsList[index],\n        };\n        return run;\n    });\n    const body = {\n        pipelineSlug,\n        testRuns: testRuns,\n    };\n    // Will be overwritten if GENTRACE_RESULT_NAME is specified\n    if (GENTRACE_RUN_NAME) {\n        body.name = GENTRACE_RUN_NAME;\n    }\n    if (GENTRACE_RESULT_NAME) {\n        body.name = GENTRACE_RESULT_NAME;\n    }\n    if (GENTRACE_BRANCH || getProcessEnv(\"GENTRACE_BRANCH\")) {\n        body.branch =\n            GENTRACE_BRANCH.length > 0\n                ? GENTRACE_BRANCH\n                : getProcessEnv(\"GENTRACE_BRANCH\");\n    }\n    if (GENTRACE_COMMIT || getProcessEnv(\"GENTRACE_COMMIT\")) {\n        body.commit =\n            GENTRACE_COMMIT.length > 0\n                ? GENTRACE_COMMIT\n                : getProcessEnv(\"GENTRACE_COMMIT\");\n    }\n    if (context === null || context === void 0 ? void 0 : context.metadata) {\n        body.metadata = context.metadata;\n    }\n    const response = yield globalGentraceApi.v1TestResultSimplePost(body);\n    return response.data;\n});\n/**\n * Retrieves pipelines from the Gentrace API.\n * @async\n * @param {PipelineParams} [params] - Optional parameters to filter the pipelines.\n * @returns {Promise<Array<Pipeline>>} - A promise that resolves to an array of pipelines.\n * @throws {Error} - Throws an error if the Gentrace API key is not initialized.\n */\nexport const getPipelines = (params) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const label = (params !== null && params !== void 0 ? params : {}).label;\n    const slug = (params !== null && params !== void 0 ? params : {}).slug;\n    const parameters = [label, slug];\n    const response = yield globalGentraceApi.v1PipelinesGet(...parameters);\n    return response.data.pipelines;\n});\n/**\n * Retrieves a test result from the Gentrace API.\n * @async\n * @param {string} resultId - The ID of the test result.\n * @returns {Promise<ExpandedTestResult>} - A promise that resolves to the test result.\n * @throws {Error} - Throws an error if the Gentrace API key is not initialized.\n */\nexport const getTestResult = (resultId) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const response = yield globalGentraceApi.v1TestResultIdGet(resultId);\n    const testResult = response.data;\n    return testResult;\n});\n/**\n * Retrieves the status of a test result from the Gentrace API.\n * @async\n * @param {string} resultId - The ID of the test result.\n * @returns {Promise<StatusInfo>} - A promise that resolves to the test result.\n * @throws {Error} - Throws an error if the Gentrace API key is not initialized.\n */\nexport const getTestResultStatus = (resultId) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const response = yield globalGentraceApi.v1TestResultStatusGet(resultId);\n    const statusInfo = response.data;\n    return statusInfo;\n});\n/**\n * Retrieves test results from the Gentrace API.\n * @async\n * @param {string} pipelineSlug - The slug of the pipeline.\n * @returns {Promise<Array<TestResult>>} - A promise that resolves to the test results.\n * @throws {Error} - Throws an error if the Gentrace API key is not initialized.\n */\nexport const getTestResults = (pipelineSlug) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!globalGentraceApi) {\n        throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n    }\n    const response = yield globalGentraceApi.v1TestResultGet(pipelineSlug);\n    const testResults = response.data.testResults;\n    return testResults;\n});\n/**\n * Runs a test for a specific pipeline.\n *\n * @param {string} pipelineSlug - The slug of the pipeline.\n * @param {(testCase: TestCase) => Promise<PipelineRun>} handler - The handler function that runs the test case and returns a promise with a PipelineRun.\n * @returns {Promise<TestRun>} - A promise that resolves to the test result.\n * @throws {Error} - Throws an error if the specified pipeline cannot be found.\n */\nexport const runTest = (pipelineSlug, handler, context) => __awaiter(void 0, void 0, void 0, function* () {\n    incrementTestCounter();\n    try {\n        const allPipelines = yield getPipelines();\n        const matchingPipeline = allPipelines.find((pipeline) => pipeline.slug === pipelineSlug);\n        if (!matchingPipeline) {\n            throw new Error(`Could not find the specified pipeline (${pipelineSlug})`);\n        }\n        const testCases = yield getTestCases(matchingPipeline.id);\n        const testRuns = [];\n        for (const testCase of testCases) {\n            const [, pipelineRun] = yield handler(testCase);\n            let mergedMetadata = {};\n            const updatedStepRuns = pipelineRun.stepRuns.map((stepRun) => {\n                var _a, _b;\n                let _c = (_a = pipelineRun.context) !== null && _a !== void 0 ? _a : {}, { metadata: thisContextMetadata, previousRunId: _prPreviousRunId } = _c, restThisContext = __rest(_c, [\"metadata\", \"previousRunId\"]);\n                let _d = (_b = stepRun.context) !== null && _b !== void 0 ? _b : {}, { metadata: stepRunContextMetadata, previousRunId: _srPreviousRunId } = _d, restStepRunContext = __rest(_d, [\"metadata\", \"previousRunId\"]);\n                // Merge metadata\n                mergedMetadata = Object.assign(Object.assign(Object.assign({}, mergedMetadata), thisContextMetadata), stepRunContextMetadata);\n                return {\n                    modelParams: stepRun.modelParams,\n                    invocation: stepRun.invocation,\n                    inputs: stepRun.inputs,\n                    outputs: stepRun.outputs,\n                    providerName: stepRun.provider,\n                    elapsedTime: stepRun.elapsedTime,\n                    startTime: stepRun.startTime,\n                    endTime: stepRun.endTime,\n                    context: Object.assign(Object.assign({}, restThisContext), restStepRunContext),\n                };\n            });\n            const testRun = {\n                caseId: testCase.id,\n                metadata: mergedMetadata,\n                stepRuns: updatedStepRuns,\n            };\n            if (pipelineRun.getId()) {\n                testRun.id = pipelineRun.getId();\n            }\n            testRuns.push(testRun);\n        }\n        if (!globalGentraceApi) {\n            throw new Error(\"Gentrace API key not initialized. Call init() first.\");\n        }\n        const body = constructSubmissionPayload(matchingPipeline.id, testRuns, context);\n        const response = yield globalGentraceApi.v1TestResultPost(body);\n        return response.data;\n    }\n    catch (e) {\n        throw e;\n    }\n    finally {\n        // Imperative that we decrement the test counter regardless of whether the function\n        // runs into an error or not.\n        decrementTestCounter();\n    }\n});\n"],"names":["this"],"mappings":"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"}