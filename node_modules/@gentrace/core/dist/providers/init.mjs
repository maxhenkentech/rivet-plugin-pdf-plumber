import { Configuration } from '../configuration.mjs';
import { V1Api } from '../api/v1-api.mjs';
import '../api/v2-api.mjs';
import { getProcessEnv } from './utils.mjs';

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let GENTRACE_API_KEY = "";
let GENTRACE_BASE_PATH = "";
let GENTRACE_BRANCH = "";
let GENTRACE_COMMIT = "";
// @deprecated: use GENTRACE_RESULT_NAME instead
let GENTRACE_RUN_NAME = "";
let GENTRACE_RESULT_NAME = "";
let globalGentraceConfig = null;
let globalGentraceApi = null;
let globalRequestBuffer = {};
let resetGlobalGentraceApi = () => {
    globalGentraceConfig = null;
};
function init(values) {
    const { apiKey, basePath, branch, commit, runName, resultName } = values !== null && values !== void 0 ? values : {};
    if (!apiKey && !getProcessEnv("GENTRACE_API_KEY")) {
        throw new Error("Gentrace API key was provided neither by the `apiKey` param in the constructor nor by the `GENTRACE_API_KEY` env variable.");
    }
    GENTRACE_API_KEY = apiKey || getProcessEnv("GENTRACE_API_KEY");
    GENTRACE_RUN_NAME = runName || getProcessEnv("GENTRACE_RUN_NAME");
    GENTRACE_RESULT_NAME = resultName || getProcessEnv("GENTRACE_RESULT_NAME");
    if (basePath) {
        try {
            const url = new URL(basePath);
            if (url.pathname.startsWith("/api")) {
            }
            else {
                throw new Error('Gentrace base path must end in "/api".');
            }
        }
        catch (err) {
            throw new Error(`Invalid Gentrace base path: ${err.message}`);
        }
        GENTRACE_BASE_PATH = basePath;
    }
    globalGentraceConfig = new Configuration({
        apiKey: GENTRACE_API_KEY,
        basePath: GENTRACE_BASE_PATH,
    });
    globalGentraceApi = new V1Api(globalGentraceConfig);
    if (branch) {
        GENTRACE_BRANCH = branch;
    }
    if (commit) {
        GENTRACE_COMMIT = commit;
    }
}
function deinit() {
    GENTRACE_API_KEY = "";
    GENTRACE_BASE_PATH = "";
    GENTRACE_BRANCH = "";
    GENTRACE_COMMIT = "";
    globalGentraceConfig = null;
    globalGentraceApi = null;
    globalRequestBuffer = {};
}
function flush() {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield Promise.allSettled(Object.values(globalRequestBuffer))).every((result) => result.status === "fulfilled");
    });
}

export { GENTRACE_API_KEY, GENTRACE_BASE_PATH, GENTRACE_BRANCH, GENTRACE_COMMIT, GENTRACE_RESULT_NAME, GENTRACE_RUN_NAME, deinit, flush, globalGentraceApi, globalGentraceConfig, globalRequestBuffer, init, resetGlobalGentraceApi };
//# sourceMappingURL=init.mjs.map
