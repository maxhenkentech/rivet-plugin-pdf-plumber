{"version":3,"file":"pipeline.js","sources":["pipeline.js"],"sourcesContent":["import { Configuration } from \"../configuration\";\nimport { globalGentraceConfig } from \"./init\";\nimport { PipelineRun } from \"./pipeline-run\";\nexport class Pipeline {\n    constructor({ slug, id, apiKey, basePath, logger, plugins, }) {\n        this.id = id;\n        this.slug = slug;\n        this.plugins = plugins;\n        if (!slug && !id) {\n            throw new Error(\"Please provide the Pipeline slug\");\n        }\n        if (!globalGentraceConfig) {\n            throw new Error(\"Please call init() before instantiating a Pipeline\");\n        }\n        if (apiKey) {\n            if (logger) {\n                logger.warn(\"The apiKey parameter is deprecated. Please declare the API key in the init() call instead.\");\n            }\n            this.config = new Configuration({\n                apiKey,\n                basePath,\n                logger,\n            });\n        }\n        else {\n            this.config = globalGentraceConfig;\n        }\n    }\n    getLogger() {\n        return this.config.logger;\n    }\n    logInfo(message) {\n        const logger = this.getLogger();\n        if (logger) {\n            logger.info(message);\n        }\n    }\n    logWarn(e) {\n        const logger = this.getLogger();\n        if (logger) {\n            logger.warn(e);\n        }\n        else {\n            // By default, we print to STDERR.\n            console.warn(e);\n        }\n    }\n    start(context) {\n        var _a;\n        const newPipelineRun = new PipelineRun({ pipeline: this, context });\n        const argList = Object.entries((_a = this.plugins) !== null && _a !== void 0 ? _a : {});\n        const argMap = Object.fromEntries(argList.map(([k, v]) => [\n            k,\n            v.advanced({\n                pipeline: this,\n                pipelineRun: newPipelineRun,\n                gentraceConfig: this.config,\n            }),\n        ]));\n        return Object.assign(newPipelineRun, argMap);\n    }\n}\n"],"names":["globalGentraceConfig","Configuration","PipelineRun"],"mappings":";;;;;;AAGO,MAAM,QAAQ,CAAC;AACtB,IAAI,WAAW,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,GAAG,EAAE;AAClE,QAAQ,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACrB,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,QAAQ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC/B,QAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,EAAE;AAC1B,YAAY,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;AAChE,SAAS;AACT,QAAQ,IAAI,CAACA,yBAAoB,EAAE;AACnC,YAAY,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;AAClF,SAAS;AACT,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,IAAI,MAAM,EAAE;AACxB,gBAAgB,MAAM,CAAC,IAAI,CAAC,4FAA4F,CAAC,CAAC;AAC1H,aAAa;AACb,YAAY,IAAI,CAAC,MAAM,GAAG,IAAIC,2BAAa,CAAC;AAC5C,gBAAgB,MAAM;AACtB,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,aAAa;AACb,YAAY,IAAI,CAAC,MAAM,GAAGD,yBAAoB,CAAC;AAC/C,SAAS;AACT,KAAK;AACL,IAAI,SAAS,GAAG;AAChB,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AAClC,KAAK;AACL,IAAI,OAAO,CAAC,OAAO,EAAE;AACrB,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACxC,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACjC,SAAS;AACT,KAAK;AACL,IAAI,OAAO,CAAC,CAAC,EAAE;AACf,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACxC,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3B,SAAS;AACT,aAAa;AACb;AACA,YAAY,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC5B,SAAS;AACT,KAAK;AACL,IAAI,KAAK,CAAC,OAAO,EAAE;AACnB,QAAQ,IAAI,EAAE,CAAC;AACf,QAAQ,MAAM,cAAc,GAAG,IAAIE,uBAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;AAC5E,QAAQ,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AAChG,QAAQ,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK;AAClE,YAAY,CAAC;AACb,YAAY,CAAC,CAAC,QAAQ,CAAC;AACvB,gBAAgB,QAAQ,EAAE,IAAI;AAC9B,gBAAgB,WAAW,EAAE,cAAc;AAC3C,gBAAgB,cAAc,EAAE,IAAI,CAAC,MAAM;AAC3C,aAAa,CAAC;AACd,SAAS,CAAC,CAAC,CAAC;AACZ,QAAQ,OAAO,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACrD,KAAK;AACL;;;;"}