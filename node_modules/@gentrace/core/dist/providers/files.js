'use strict';

var init = require('./init.js');
var file = require('@web-std/file');

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function uploadBuffer(fileName, buffer, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield uploadFile(new file.File([buffer], fileName, options !== null && options !== void 0 ? options : {
            type: "application/octet-stream",
            lastModified: Date.now(),
        }));
    });
}
function uploadFile(file) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!init.globalGentraceApi) {
            throw new Error("Gentrace API key not initialized. Call init() first.");
        }
        const response = yield init.globalGentraceApi.v1FilesUploadPost(undefined, file);
        return response.data.url;
    });
}

exports.uploadBuffer = uploadBuffer;
exports.uploadFile = uploadFile;
//# sourceMappingURL=files.js.map
